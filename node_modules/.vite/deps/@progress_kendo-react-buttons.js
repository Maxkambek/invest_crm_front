import {
  index_esm_exports,
  require_prop_types,
  validatePackage
} from "./chunk-VO74ILYT.js";
import {
  require_react_dom
} from "./chunk-X3B7SAOS.js";
import {
  require_react
} from "./chunk-RDZYK52F.js";
import {
  __toESM
} from "./chunk-5WWUZCGV.js";

// node_modules/@progress/kendo-react-buttons/dist/es/Button.js
var React27 = __toESM(require_react());
var PropTypes5 = __toESM(require_prop_types());

// node_modules/@progress/kendo-react-common/dist/es/contexts/ZIndexContext.js
var React = __toESM(require_react());
var ZIndexContext = React.createContext(0);
var useZIndexContext = function() {
  return React.useContext(ZIndexContext);
};
ZIndexContext.displayName = "KendoReactZIndexContext";

// node_modules/@progress/kendo-react-common/dist/es/browser-support.service.js
var getDocument = function() {
  return typeof document !== "undefined" ? document : {};
};
var BrowserSupportService = (
  /** @class */
  function() {
    function BrowserSupportService2() {
      this.scrollbar = 0;
    }
    Object.defineProperty(BrowserSupportService2.prototype, "scrollbarWidth", {
      get: function() {
        var document2 = getDocument();
        if (!this.scrollbar && document2 && document2.createElement) {
          var div = document2.createElement("div");
          div.style.cssText = "overflow:scroll;overflow-x:hidden;zoom:1;clear:both;display:block";
          div.innerHTML = "&nbsp;";
          document2.body.appendChild(div);
          this.scrollbar = div.offsetWidth - div.scrollWidth;
          document2.body.removeChild(div);
        }
        return this.scrollbar;
      },
      enumerable: false,
      configurable: true
    });
    return BrowserSupportService2;
  }()
);

// node_modules/@progress/kendo-react-common/dist/es/canUseDOM.js
var canUseDOM = Boolean(
  // from fbjs
  typeof window !== "undefined" && window.document && window.document.createElement
);

// node_modules/@progress/kendo-react-common/dist/es/classNames.js
var classNames = function() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  var result = {};
  var addLeafKeys = function(arg) {
    return typeof arg === "object" ? Object.keys(arg).forEach(function(key) {
      result[key] = arg[key];
    }) : result[arg] = true;
  };
  ;
  var addKeys = function(list) {
    return list.filter(function(arg) {
      return arg !== true && !!arg;
    }).map(function(arg) {
      return Array.isArray(arg) ? addKeys(arg) : addLeafKeys(arg);
    });
  };
  ;
  addKeys(args);
  return Object.keys(result).map(function(key) {
    return result[key] && key || null;
  }).filter(function(el) {
    return el !== null;
  }).join(" ");
};

// node_modules/@progress/kendo-react-common/dist/es/clone.js
var React2 = __toESM(require_react());

// node_modules/@progress/kendo-react-common/dist/es/FormComponent.js
var FormComponent = (
  /** @class */
  function() {
    function FormComponent2() {
    }
    return FormComponent2;
  }()
);

// node_modules/@progress/kendo-react-common/dist/es/getTabIndex.js
var DISABLED_TABINDEX = -1;
var DEFAULT_TABINDEX = 0;
var getTabIndex = function(tabIndex, disabled, useDefaultTabIndexWhenDisabled) {
  var parsedTabIndex = typeof tabIndex === "string" ? parseInt(tabIndex, void 0) : tabIndex;
  if (parsedTabIndex === NaN) {
    return void 0;
  }
  return parsedTabIndex !== void 0 ? parsedTabIndex : disabled ? useDefaultTabIndexWhenDisabled ? void 0 : DISABLED_TABINDEX : DEFAULT_TABINDEX;
};

// node_modules/@progress/kendo-react-common/dist/es/constants/index.js
var FIELD_REGEX = /\[(?:(\d+)|['"](.*?)['"])\]|((?:(?!\[.*?\]|\.).)+)/g;

// node_modules/@progress/kendo-react-common/dist/es/fieldList.js
function fieldList(field) {
  var fields = [];
  field.replace(FIELD_REGEX, function(_match, index, indexAccessor, fieldName) {
    fields.push(index !== void 0 ? index : indexAccessor || fieldName);
  });
  return fields;
}

// node_modules/@progress/kendo-react-common/dist/es/getter.js
var getterCache = {};
getterCache.undefined = function() {
  return void 0;
};
function getter(field) {
  if (getterCache[field]) {
    return getterCache[field];
  }
  var fields = fieldList(field);
  getterCache[field] = function(obj) {
    var result = obj;
    for (var idx = 0; idx < fields.length && result; idx++) {
      result = result[fields[idx]];
    }
    return result;
  };
  return getterCache[field];
}

// node_modules/@progress/kendo-react-common/dist/es/guid.js
var guid = function() {
  var id = "";
  var i;
  var random;
  for (i = 0; i < 32; i++) {
    random = Math.random() * 16 | 0;
    if (i === 8 || i === 12 || i === 16 || i === 20) {
      id += "-";
    }
    id += (i === 12 ? 4 : i === 16 ? random & 3 | 8 : random).toString(16);
  }
  return id;
};

// node_modules/@progress/kendo-react-common/dist/es/keys.js
var Keys = {
  backspace: 8,
  tab: 9,
  enter: 13,
  shift: 16,
  esc: 27,
  space: 32,
  pageUp: 33,
  pageDown: 34,
  end: 35,
  home: 36,
  left: 37,
  up: 38,
  right: 39,
  down: 40,
  delete: 46
};

// node_modules/@progress/kendo-react-common/dist/es/noop.js
var noop = function() {
};

// node_modules/@progress/kendo-react-common/dist/es/setter.js
var setterCache = {};
setterCache.undefined = function(obj) {
  return obj;
};

// node_modules/@progress/kendo-react-common/dist/es/validate-package.js
function validatePackage2(packageMetadata3) {
  if (typeof index_esm_exports !== "undefined") {
    validatePackage(packageMetadata3);
  } else {
    var message = "License activation failed for ".concat(packageMetadata3.name, "\n");
    message += "The @progress/kendo-licensing script is not loaded.\n";
    message += "See ".concat(packageMetadata3.licensingDocsUrl, " for more information.\n");
    console.warn(message);
  }
}

// node_modules/@progress/kendo-react-common/dist/es/watermark/WatermarkOverlay.js
var React3 = __toESM(require_react());
var ReactDOM = __toESM(require_react_dom());

// node_modules/@progress/kendo-react-common/dist/es/events/dispatchEvent.js
function dispatchEvent(eventHandler, dispatchedEvent, target, eventData) {
  if (eventHandler) {
    var eventBaseData = {
      syntheticEvent: dispatchedEvent,
      nativeEvent: dispatchedEvent.nativeEvent,
      target
    };
    eventHandler.call(void 0, Object.assign(eventBaseData, eventData));
  }
}

// node_modules/@progress/kendo-react-common/dist/es/hocs/AsyncFocusBlur.js
var React5 = __toESM(require_react());

// node_modules/@progress/kendo-react-common/dist/es/hooks/useAsyncFocusBlur.js
var React4 = __toESM(require_react());

// node_modules/@progress/kendo-react-common/dist/es/hocs/withPropsContext.js
var React7 = __toESM(require_react());

// node_modules/@progress/kendo-react-common/dist/es/hooks/usePropsContext.js
var React6 = __toESM(require_react());

// node_modules/@progress/kendo-react-common/dist/es/hooks/useDir.js
var React8 = __toESM(require_react());
function useDir(elementRef, initialDir, args) {
  var _a = React8.useState(initialDir), dir = _a[0], setDir = _a[1];
  React8.useEffect(function() {
    if (!dir && window && elementRef.current) {
      var rtlCandidate = window.getComputedStyle(elementRef.current).direction;
      if (rtlCandidate) {
        setDir(rtlCandidate);
      }
    }
  }, args);
  return dir;
}

// node_modules/@progress/kendo-react-common/dist/es/hooks/useRtl.js
var React9 = __toESM(require_react());

// node_modules/@progress/kendo-react-common/dist/es/hooks/useMouse.js
var React10 = __toESM(require_react());
var useMouse = function(props, target, extend) {
  if (extend === void 0) {
    extend = {};
  }
  var handleMouseDown = React10.useCallback(function(event) {
    if (extend.onMouseDown) {
      extend.onMouseDown.call(void 0, event);
    }
    if (props.onMouseDown) {
      props.onMouseDown.call(void 0, {
        target: target.current,
        syntheticEvent: event
      });
    }
  }, [extend.onMouseDown, props.onMouseDown, target]);
  var handleMouseUp = React10.useCallback(function(event) {
    if (extend.onMouseUp) {
      extend.onMouseUp.call(void 0, event);
    }
    if (props.onMouseUp) {
      props.onMouseUp.call(void 0, {
        target: target.current,
        syntheticEvent: event
      });
    }
  }, [extend.onMouseUp, props.onMouseUp, target]);
  var handleClick = React10.useCallback(function(event) {
    if (extend.onClick) {
      extend.onClick.call(void 0, event);
    }
    if (props.onClick) {
      props.onClick.call(void 0, {
        target: target.current,
        syntheticEvent: event
      });
    }
  }, [extend.onClick, props.onClick, target]);
  var handleDoubleClick = React10.useCallback(function(event) {
    if (extend.onDoubleClick) {
      extend.onDoubleClick.call(void 0, event);
    }
    if (props.onDoubleClick) {
      props.onDoubleClick.call(void 0, {
        target: target.current,
        syntheticEvent: event
      });
    }
  }, [extend.onDoubleClick, props.onDoubleClick, target]);
  var handleMouseEnter = React10.useCallback(function(event) {
    if (extend.onMouseEnter) {
      extend.onMouseEnter.call(void 0, event);
    }
    if (props.onMouseEnter) {
      props.onMouseEnter.call(void 0, {
        target: target.current,
        syntheticEvent: event
      });
    }
  }, [extend.onMouseEnter, props.onMouseEnter, target]);
  var handleMouseLeave = React10.useCallback(function(event) {
    if (extend.onMouseLeave) {
      extend.onMouseLeave.call(void 0, event);
    }
    if (props.onMouseLeave) {
      props.onMouseLeave.call(void 0, {
        target: target.current,
        syntheticEvent: event
      });
    }
  }, [extend.onMouseLeave, props.onMouseLeave, target]);
  var handelMouseMove = React10.useCallback(function(event) {
    if (extend.onMouseMove) {
      extend.onMouseMove.call(void 0, event);
    }
    if (props.onMouseMove) {
      props.onMouseMove.call(void 0, {
        target: target.current,
        syntheticEvent: event
      });
    }
  }, [extend.onMouseMove, props.onMouseMove, target]);
  var handleMouseOut = React10.useCallback(function(event) {
    if (extend.onMouseOut) {
      extend.onMouseOut.call(void 0, event);
    }
    if (props.onMouseOut) {
      props.onMouseOut.call(void 0, {
        target: target.current,
        syntheticEvent: event
      });
    }
  }, [extend.onMouseOut, props.onMouseOut, target]);
  var handleMouseOver = React10.useCallback(function(event) {
    if (extend.onMouseOver) {
      extend.onMouseOver.call(void 0, event);
    }
    if (props.onMouseOver) {
      props.onMouseOver.call(void 0, {
        target: target.current,
        syntheticEvent: event
      });
    }
  }, [extend.onMouseOver, props.onMouseOver, target]);
  return {
    onClick: handleClick,
    onMouseUp: handleMouseUp,
    onMouseDown: handleMouseDown,
    onDoubleClick: handleDoubleClick,
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave,
    onMouseMove: handelMouseMove,
    onMouseOut: handleMouseOut,
    onMouseOver: handleMouseOver
  };
};

// node_modules/@progress/kendo-react-common/dist/es/hooks/useCollection.js
var React11 = __toESM(require_react());
var COLLECTION_ACTION;
(function(COLLECTION_ACTION2) {
  COLLECTION_ACTION2[COLLECTION_ACTION2["add"] = 0] = "add";
  COLLECTION_ACTION2[COLLECTION_ACTION2["remove"] = 1] = "remove";
})(COLLECTION_ACTION || (COLLECTION_ACTION = {}));
var useCollection = function(initial) {
  if (initial === void 0) {
    initial = [];
  }
  var collection = React11.useRef(initial);
  var handleCollectionAction = React11.useCallback(function(action) {
    switch (action.type) {
      case COLLECTION_ACTION.add:
        collection.current.push(action.item);
        break;
      case COLLECTION_ACTION.remove:
        var index = collection.current.indexOf(action.item);
        collection.current.splice(index, 1);
        break;
      default:
        break;
    }
  }, []);
  return [collection.current, handleCollectionAction];
};

// node_modules/@progress/kendo-react-common/dist/es/hooks/useDocument.js
var React12 = __toESM(require_react());

// node_modules/@progress/kendo-react-common/dist/es/hooks/useWindow.js
var React13 = __toESM(require_react());

// node_modules/@progress/kendo-react-common/dist/es/icons/Icon.js
var React14 = __toESM(require_react());
var PropTypes = __toESM(require_prop_types());

// node_modules/@progress/kendo-react-common/dist/es/icons/constants.js
var SIZE_CLASSES = {
  "default": "",
  "xsmall": "k-icon-xs",
  "small": "k-icon-sm",
  "medium": "k-icon-md",
  "large": "k-icon-lg",
  "xlarge": "k-icon-xl",
  "xxlarge": "k-icon-xxl",
  "xxxlarge": "k-icon-xxxl"
};

// node_modules/@progress/kendo-react-common/dist/es/icons/Icon.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p2 in s)
        if (Object.prototype.hasOwnProperty.call(s, p2))
          t[p2] = s[p2];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __rest = function(s, e) {
  var t = {};
  for (var p2 in s)
    if (Object.prototype.hasOwnProperty.call(s, p2) && e.indexOf(p2) < 0)
      t[p2] = s[p2];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p2 = Object.getOwnPropertySymbols(s); i < p2.length; i++) {
      if (e.indexOf(p2[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p2[i]))
        t[p2[i]] = s[p2[i]];
    }
  return t;
};
var Icon = React14.forwardRef(function(props, ref) {
  var className = props.className, name = props.name, themeColor = props.themeColor, size = props.size, flip2 = props.flip, style = props.style, id = props.id, tabIndex = props.tabIndex, others = __rest(props, ["className", "name", "themeColor", "size", "flip", "style", "id", "tabIndex"]);
  var target = React14.useRef(null);
  var elementRef = React14.useRef(null);
  React14.useImperativeHandle(target, function() {
    return {
      element: elementRef.current
    };
  });
  React14.useImperativeHandle(ref, function() {
    return target.current;
  });
  var sizeProp = React14.useMemo(function() {
    return size || defaultProps.size;
  }, [size]);
  var flipProp = React14.useMemo(function() {
    return flip2 || defaultProps.flip;
  }, [flip2]);
  var fontClassNames = React14.useMemo(function() {
    var _a;
    return classNames("k-icon", "k-font-icon", name && toIconClass(name), (_a = {}, _a["k-color-".concat(themeColor)] = themeColor, _a["k-flip-h"] = flipProp === "horizontal" || flipProp === "both", _a["k-flip-v"] = flipProp === "vertical" || flipProp === "both", _a), SIZE_CLASSES[sizeProp], className);
  }, [name, themeColor, sizeProp, flipProp, className]);
  var mouseProps = useMouse(props, target);
  return React14.createElement("span", __assign({ ref: elementRef }, others, mouseProps, { className: fontClassNames, id, tabIndex, style, role: "presentation" }));
});
Icon.propTypes = {
  style: PropTypes.object,
  classNames: PropTypes.string,
  name: PropTypes.string,
  themeColor: PropTypes.oneOf([
    "inherit",
    "primary",
    "secondary",
    "tertiary",
    "info",
    "success",
    "error",
    "warning",
    "dark",
    "light",
    "inverse"
  ]),
  size: PropTypes.oneOf(["default", "xsmall", "small", "medium", "large", "xlarge", "xxlarge", "xxxlarge"]),
  flip: PropTypes.oneOf(["default", "horizontal", "vertical", "both"])
};
var defaultProps = {
  size: "default",
  flip: "default"
};
Icon.displayName = "KendoIcon";

// node_modules/@progress/kendo-react-common/dist/es/icons/SvgIcon.js
var React15 = __toESM(require_react());
var PropTypes2 = __toESM(require_prop_types());
var __assign2 = function() {
  __assign2 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p2 in s)
        if (Object.prototype.hasOwnProperty.call(s, p2))
          t[p2] = s[p2];
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
var __rest2 = function(s, e) {
  var t = {};
  for (var p2 in s)
    if (Object.prototype.hasOwnProperty.call(s, p2) && e.indexOf(p2) < 0)
      t[p2] = s[p2];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p2 = Object.getOwnPropertySymbols(s); i < p2.length; i++) {
      if (e.indexOf(p2[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p2[i]))
        t[p2[i]] = s[p2[i]];
    }
  return t;
};
var SvgIcon = React15.forwardRef(function(props, ref) {
  var children = props.children, className = props.className, svgClassName = props.svgClassName, icon = props.icon, flip2 = props.flip, id = props.id, tabIndex = props.tabIndex, size = props.size, style = props.style, svgStyle = props.svgStyle, themeColor = props.themeColor, viewBox = props.viewBox, name = props.name, onClick = props.onClick, others = __rest2(props, ["children", "className", "svgClassName", "icon", "flip", "id", "tabIndex", "size", "style", "svgStyle", "themeColor", "viewBox", "name", "onClick"]);
  var elementRef = React15.useRef(null);
  React15.useImperativeHandle(ref, function() {
    return {
      element: elementRef.current
    };
  });
  var iconNameProp = React15.useMemo(function() {
    return icon ? icon.name : defaultProps2.icon;
  }, [icon]);
  var sizeProp = React15.useMemo(function() {
    return size || defaultProps2.size;
  }, [size]);
  var flipProp = React15.useMemo(function() {
    return flip2 || defaultProps2.flip;
  }, [flip2]);
  var viewBoxProp = React15.useMemo(function() {
    return viewBox || defaultProps2.viewBox;
  }, [viewBox]);
  var elementClassNames = React15.useMemo(function() {
    var _a;
    return classNames("k-icon", "k-svg-icon", "k-svg-i-" + iconNameProp, (_a = {}, _a["k-color-".concat(themeColor)] = themeColor, _a["k-flip-h"] = flipProp === "horizontal" || flipProp === "both", _a["k-flip-v"] = flipProp === "vertical" || flipProp === "both", _a), SIZE_CLASSES[sizeProp], className);
  }, [iconNameProp, themeColor, sizeProp, flipProp, className]);
  var elementStyle = React15.useMemo(function() {
    if (props.width && props.height) {
      return __assign2({ width: props.width, height: props.height }, style);
    } else if (props.width) {
      return __assign2({ width: props.width, height: props.width }, style);
    } else if (props.height) {
      return __assign2({ width: props.height, height: props.height }, style);
    } else {
      return __assign2({}, style);
    }
  }, [props.width, props.height, style]);
  return React15.createElement(
    "span",
    { className: elementClassNames, style: elementStyle, ref: elementRef, onClick },
    React15.createElement("svg", __assign2({ id, className: svgClassName, style: svgStyle, "aria-hidden": true, tabIndex, focusable: false, xmlns: "http://www.w3.org/2000/svg", viewBox: icon ? icon.viewBox : viewBoxProp, dangerouslySetInnerHTML: icon ? { __html: icon.content } : void 0 }, others), icon ? void 0 : children)
  );
});
SvgIcon.propTypes = {
  style: PropTypes2.object,
  classNames: PropTypes2.string,
  children: PropTypes2.any,
  icon: PropTypes2.object,
  themeColor: PropTypes2.oneOf([
    "inherit",
    "primary",
    "secondary",
    "tertiary",
    "info",
    "success",
    "error",
    "warning",
    "dark",
    "light",
    "inverse"
  ]),
  size: PropTypes2.oneOf(["default", "xsmall", "small", "medium", "large", "xlarge", "xxlarge", "xxxlarge"]),
  flip: PropTypes2.oneOf(["default", "horizontal", "vertical", "both"])
};
var defaultProps2 = {
  size: "default",
  flip: "default",
  icon: "",
  viewBox: "0 0 24 24"
};
SvgIcon.displayName = "KendoSvgIcon";

// node_modules/@progress/kendo-react-common/dist/es/icons/IconWrap.js
var React17 = __toESM(require_react());

// node_modules/@progress/kendo-react-common/dist/es/icons/IconsContext.js
var React16 = __toESM(require_react());
var IconsContext = React16.createContext({ type: "svg" });
IconsContext.displayName = "KendoReactIconsContext";

// node_modules/@progress/kendo-react-common/dist/es/icons/IconWrap.js
var __assign3 = function() {
  __assign3 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p2 in s)
        if (Object.prototype.hasOwnProperty.call(s, p2))
          t[p2] = s[p2];
    }
    return t;
  };
  return __assign3.apply(this, arguments);
};
var __rest3 = function(s, e) {
  var t = {};
  for (var p2 in s)
    if (Object.prototype.hasOwnProperty.call(s, p2) && e.indexOf(p2) < 0)
      t[p2] = s[p2];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p2 = Object.getOwnPropertySymbols(s); i < p2.length; i++) {
      if (e.indexOf(p2[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p2[i]))
        t[p2[i]] = s[p2[i]];
    }
  return t;
};
var IconWrap = React17.forwardRef(function(props, ref) {
  var _a, _b;
  var _c = React17.useContext(IconsContext), type = _c.type, icons = _c.icons;
  var icon = props.icon, fontIconProps = __rest3(props, ["icon"]);
  var name = type === "svg" ? ((_a = props.icon) === null || _a === void 0 ? void 0 : _a.name) || props.name : props.name || ((_b = props.icon) === null || _b === void 0 ? void 0 : _b.name);
  name = name && icons && icons[name] && typeof icons[name] === "string" ? icons[name] : name;
  var svg = name && icons && icons[name] && typeof icons[name] !== "string" ? icons[name] : icon;
  return type === "svg" && svg ? React17.createElement(SvgIcon, __assign3({}, props, { icon: svg, ref })) : React17.createElement(Icon, __assign3({}, fontIconProps, { name, ref }));
});
IconWrap.displayName = "KendoIconWrap";

// node_modules/@progress/kendo-react-common/dist/es/icons/utils.js
var PropTypes3 = __toESM(require_prop_types());
var toIconName = function(iconClass) {
  return iconClass.replace(/^k-i-/, "");
};
var toIconClass = function(name) {
  return "k-i-" + name;
};
var svgIconPropType = PropTypes3.shape({
  name: PropTypes3.string.isRequired,
  content: PropTypes3.string.isRequired,
  viewBox: PropTypes3.string.isRequired
});

// node_modules/@progress/kendo-react-common/dist/es/typography/Typography.js
var React18 = __toESM(require_react());
var PropTypes4 = __toESM(require_prop_types());

// node_modules/@progress/kendo-react-common/dist/es/typography/constants.js
var FONT_SIZE_CLASSES = {
  "xsmall": "k-fs-xs",
  "small": "k-fs-sm",
  "medium": "k-fs-md",
  "large": "k-fs-lg",
  "xlarge": "k-fs-xl"
};
var FONT_WEIGHT_CLASSES = {
  "light": "k-font-weight-light",
  "normal": "k-font-weight-normal",
  "bold": "k-font-weight-bold"
};
var MARGIN_ENUM_CLASSES = {
  "xsmall": "k-m-xs",
  "small": "k-m-sm",
  "medium": "k-m-md",
  "large": "k-m-lg",
  "xlarge": "k-m-xl",
  "thin": "k-m-thin",
  "hair": "k-m-hair"
};
var MARGIN_ENUM_VALUES = {
  "xsmall": "xs",
  "small": "sm",
  "medium": "md",
  "large": "lg",
  "xlarge": "xl",
  "thin": "thin",
  "hair": "hair"
};
var MARGIN_SIDES_CLASSES = {
  "top": "k-mt-",
  "right": "k-mr-",
  "bottom": "k-mb-",
  "left": "k-ml-"
};
var TEXT_ALIGN_CLASSES = {
  "left": "k-text-left",
  "right": "k-text-right",
  "center": "k-text-center",
  "justify": "k-text-justify"
};
var TEXT_TRANSFORM_CLASSES = {
  "lowercase": "k-text-lowercase",
  "uppercase": "k-text-uppercase",
  "capitalize": "k-text-capitalize"
};
var THEME_COLOR_CLASSES = {
  "inherit": "k-color-inherit",
  "primary": "k-color-primary",
  "secondary": "k-color-secondary",
  "tertiary": "k-color-tertiary",
  "info": "k-color-info",
  "success": "k-color-success",
  "warning": "k-color-warning",
  "error": "k-color-error",
  "dark": "k-color-dark",
  "light": "k-color-light",
  "inverse": "k-color-inverse"
};

// node_modules/@progress/kendo-react-common/dist/es/typography/Typography.js
var __assign4 = function() {
  __assign4 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p2 in s)
        if (Object.prototype.hasOwnProperty.call(s, p2))
          t[p2] = s[p2];
    }
    return t;
  };
  return __assign4.apply(this, arguments);
};
var __rest4 = function(s, e) {
  var t = {};
  for (var p2 in s)
    if (Object.prototype.hasOwnProperty.call(s, p2) && e.indexOf(p2) < 0)
      t[p2] = s[p2];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p2 = Object.getOwnPropertySymbols(s); i < p2.length; i++) {
      if (e.indexOf(p2[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p2[i]))
        t[p2[i]] = s[p2[i]];
    }
  return t;
};
var generateTypography = function(element3) {
  var component = React18.forwardRef(function(props, ref) {
    var id = props.id, style = props.style, className = props.className, fontSize = props.fontSize, fontWeight = props.fontWeight, textAlign = props.textAlign, textTransform = props.textTransform, themeColor = props.themeColor, margin = props.margin, others = __rest4(props, ["id", "style", "className", "fontSize", "fontWeight", "textAlign", "textTransform", "themeColor", "margin"]);
    var target = React18.useRef(null);
    var elementRef = React18.useRef(null);
    React18.useImperativeHandle(target, function() {
      return {
        element: elementRef.current,
        props
      };
    });
    React18.useImperativeHandle(ref, function() {
      return target.current;
    });
    var defaultClass = function() {
      var classMap = element3 === "p" ? "paragraph" : element3;
      return "k-".concat(classMap);
    };
    var Component9 = element3;
    var setMarginClassPerSide = function(marginSide, value) {
      var val = typeof value === "string" ? MARGIN_ENUM_VALUES[value] : value;
      return "".concat(MARGIN_SIDES_CLASSES[marginSide]).concat(val);
    };
    var setMarginClasses = function() {
      if (margin === void 0) {
        return;
      }
      if (typeof margin === "string") {
        return [MARGIN_ENUM_CLASSES[margin]];
      }
      if (typeof margin === "number" && margin >= 0 && margin <= 24) {
        return ["k-m-".concat(margin)];
      }
      if (typeof margin === "object") {
        var marginClassesList_1 = [];
        Object.keys(margin).forEach(function(key) {
          if (margin[key] !== null && margin[key] !== void 0) {
            marginClassesList_1.push(setMarginClassPerSide(key, margin[key]));
          }
        });
        var classes = marginClassesList_1.join(" ");
        return classes;
      }
    };
    var setTypographyClasses = function() {
      var typographyArray = [
        defaultClass(),
        FONT_SIZE_CLASSES[fontSize],
        FONT_WEIGHT_CLASSES[fontWeight],
        TEXT_ALIGN_CLASSES[textAlign],
        TEXT_TRANSFORM_CLASSES[textTransform],
        THEME_COLOR_CLASSES[themeColor],
        setMarginClasses(),
        className
      ];
      var typographyClasses = typographyArray.filter(function(n) {
        return n !== void 0;
      }).join(" ");
      return typographyClasses;
    };
    return React18.createElement(Component9, __assign4({ id, ref: elementRef, className: setTypographyClasses(), style }, others), props.children);
  });
  component.propTypes = {
    style: PropTypes4.object,
    className: PropTypes4.string,
    fontSize: PropTypes4.oneOf(["xsmall", "small", "medium", "large", "xlarge"]),
    fontWeight: PropTypes4.oneOf(["light", "normal", "bold"]),
    margin: PropTypes4.oneOfType([
      PropTypes4.number,
      PropTypes4.object,
      PropTypes4.oneOf(["xsmall", "small", "medium", "large", "xlarge", "thin", "hair"])
    ]),
    textAlign: PropTypes4.oneOf(["left", "right", "center", "justify"]),
    textTransform: PropTypes4.oneOf(["lowercase", "uppercase", "capitalize"]),
    themeColor: PropTypes4.oneOf([
      "inherit",
      "primary",
      "secondary",
      "tertiary",
      "info",
      "success",
      "error",
      "warning",
      "dark",
      "light",
      "inverse"
    ])
  };
  component.displayName = "KendoReactTypography".concat(element3.toUpperCase());
  return component;
};
var h1 = generateTypography("h1");
var h2 = generateTypography("h2");
var h3 = generateTypography("h3");
var h4 = generateTypography("h4");
var h5 = generateTypography("h5");
var h6 = generateTypography("h6");
var p = generateTypography("p");
var code = generateTypography("code");
var pre = generateTypography("pre");

// node_modules/@progress/kendo-react-common/dist/es/drag-n-drop/index.js
var React24 = __toESM(require_react());

// node_modules/@progress/kendo-react-common/dist/es/hooks/useDraggable.js
var React21 = __toESM(require_react());

// node_modules/@progress/kendo-draggable-common/dist/es/algorithms/intersect.js
var getRatio = function(element3, target) {
  var elementRect = element3.getBoundingClientRect();
  var targetRect = target.getBoundingClientRect();
  var top = Math.max(targetRect.top, elementRect.top);
  var left = Math.max(targetRect.left, elementRect.left);
  var right = Math.min(targetRect.left + targetRect.width, elementRect.left + elementRect.width);
  var bottom = Math.min(targetRect.top + targetRect.height, elementRect.top + elementRect.height);
  var width = right - left;
  var height = bottom - top;
  if (left < right && top < bottom) {
    var targetArea = targetRect.width * targetRect.height;
    var entryArea = elementRect.width * elementRect.height;
    var intersectionArea = width * height;
    var intersectionRatio = intersectionArea / (targetArea + entryArea - intersectionArea);
    return Number(intersectionRatio.toFixed(4));
  }
  return 0;
};
var intersect = function(element3, candidates) {
  var max = 0;
  var result = null;
  candidates.forEach(function(candidate) {
    if (candidate && element3) {
      var ration = getRatio(element3, candidate);
      if (ration > max) {
        max = ration;
        result = candidate;
      }
    }
  });
  return result;
};

// node_modules/@progress/kendo-draggable-common/dist/es/utils/index.js
var detectBrowser = function() {
  var ua = window && window.navigator.userAgent;
  if (!ua) {
    return false;
  }
  var browser = false;
  var match = [];
  var browserRxs = {
    edge: /(edge)[ \/]([\w.]+)/i,
    webkit: /(chrome|crios)[ \/]([\w.]+)/i,
    safari: /(webkit)[ \/]([\w.]+)/i,
    opera: /(opera)(?:.*version|)[ \/]([\w.]+)/i,
    msie: /(msie\s|trident.*? rv:)([\w.]+)/i,
    mozilla: /(mozilla)(?:.*? rv:([\w.]+)|)/i
  };
  for (var agent in browserRxs) {
    if (browserRxs.hasOwnProperty(agent)) {
      match = ua.match(browserRxs[agent]);
      if (match) {
        browser = {};
        browser[agent] = true;
        browser[match[1].toLowerCase().split(" ")[0].split("/")[0]] = true;
        browser.version = parseInt(document.DOCUMENT_NODE || match[2], 10);
        break;
      }
    }
  }
  return browser;
};
var getDocument2 = function(element3) {
  return element3 ? element3.ownerDocument || window.document : window.document;
};
var getWindow = function(element3) {
  var document2 = getDocument2(element3);
  return document2 ? document2.defaultView || window : window;
};
var scrollableRoot = function(element3) {
  var support = { browser: detectBrowser() };
  var document2 = getDocument2(element3);
  return support.browser.edge || support.browser.safari ? document2.body : document2.documentElement;
};
var isScrollable = function(el) {
  if (el && el.className && typeof el.className === "string" && el.className.indexOf("k-auto-scrollable") > -1) {
    return true;
  }
  var overflow = window.getComputedStyle(el, "overflow").overflow;
  return overflow.indexOf("auto") > -1 || overflow.indexOf("scroll") > -1;
};
var getScrollableParent = function(el) {
  var root = scrollableRoot(el);
  if (!el || el === document.body || el === document.documentElement) {
    return root;
  }
  var parent = el;
  while (parent && parent !== document.body && parent.nodeType !== Node.DOCUMENT_FRAGMENT_NODE && parent.nodeType !== Node.DOCUMENT_NODE && !isScrollable(parent)) {
    parent = parent.parentNode;
  }
  if (parent && (parent === document.body || parent.nodeType === Node.DOCUMENT_FRAGMENT_NODE)) {
    return root;
  }
  return parent;
};
var autoScrollVelocity = function(mouseX, mouseY, rect) {
  var velocity = { x: 0, y: 0 };
  var AUTO_SCROLL_AREA = 50;
  if (mouseX - rect.left < AUTO_SCROLL_AREA) {
    velocity.x = -(AUTO_SCROLL_AREA - (mouseX - rect.left));
  } else if (rect.right - mouseX < AUTO_SCROLL_AREA) {
    velocity.x = AUTO_SCROLL_AREA - (rect.right - mouseX);
  }
  if (mouseY - rect.top < AUTO_SCROLL_AREA) {
    velocity.y = -(AUTO_SCROLL_AREA - (mouseY - rect.top));
  } else if (rect.bottom - mouseY < AUTO_SCROLL_AREA) {
    velocity.y = AUTO_SCROLL_AREA - (rect.bottom - mouseY);
  }
  return velocity;
};
var scrollableViewPort = function(el, window2) {
  var root = scrollableRoot(el);
  if (el === root) {
    return {
      top: root.scrollTop,
      left: root.scrollLeft,
      bottom: root.scrollTop + window2.innerHeight,
      right: root.scrollLeft + window2.innerWidth
    };
  } else {
    var rect = el.getBoundingClientRect();
    return {
      bottom: rect.top + rect.height,
      right: rect.left + rect.width,
      left: rect.left,
      top: rect.top
    };
  }
};
var isPointerInsideContainer = function(x, y, container) {
  var rect = container.getBoundingClientRect();
  return rect.top <= y && rect.left <= x && y <= rect.bottom && x <= rect.right;
};

// node_modules/@progress/kendo-draggable-common/dist/es/drag-n-drop.js
var DRAG_AND_DROP_DISPATCH_ACTION;
(function(DRAG_AND_DROP_DISPATCH_ACTION2) {
  DRAG_AND_DROP_DISPATCH_ACTION2["POINTER_DOWN"] = "pointerdown";
  DRAG_AND_DROP_DISPATCH_ACTION2["POINTER_MOVE"] = "pointermove";
  DRAG_AND_DROP_DISPATCH_ACTION2["POINTER_UP"] = "pointerup";
  DRAG_AND_DROP_DISPATCH_ACTION2["POINTER_CANCEL"] = "pointercancel";
  DRAG_AND_DROP_DISPATCH_ACTION2["MOUSE_DOWN"] = "mousedown";
  DRAG_AND_DROP_DISPATCH_ACTION2["MOUSE_MOVE"] = "mousemove";
  DRAG_AND_DROP_DISPATCH_ACTION2["MOUSE_UP"] = "mouseup";
  DRAG_AND_DROP_DISPATCH_ACTION2["CONTEXT_MENU"] = "contextmenu";
  DRAG_AND_DROP_DISPATCH_ACTION2["TOUCH_START"] = "touchstart";
  DRAG_AND_DROP_DISPATCH_ACTION2["TOUCH_MOVE"] = "touchmove";
  DRAG_AND_DROP_DISPATCH_ACTION2["TOUCH_END"] = "touchend";
  DRAG_AND_DROP_DISPATCH_ACTION2["TOUCH_CANCEL"] = "touchcancel";
  DRAG_AND_DROP_DISPATCH_ACTION2["SCROLL"] = "scroll";
  DRAG_AND_DROP_DISPATCH_ACTION2["START"] = "KENDO_DRAG_AND_DROP_START";
  DRAG_AND_DROP_DISPATCH_ACTION2["MOVE"] = "KENDO_DRAG_AND_DROP_MOVE";
  DRAG_AND_DROP_DISPATCH_ACTION2["END"] = "KENDO_DRAG_AND_DROP_END";
  DRAG_AND_DROP_DISPATCH_ACTION2["CANCEL"] = "KENDO_DRAG_AND_DROP_CANCEL";
})(DRAG_AND_DROP_DISPATCH_ACTION || (DRAG_AND_DROP_DISPATCH_ACTION = {}));
var isTouchEvent = function(event) {
  return /^touch/.test(event.type);
};
var isScrollEvent = function(event) {
  return /^(scroll)/.test(event.type);
};
var normalizeEvent = function(event, state) {
  return isTouchEvent(event) ? {
    pageX: event.changedTouches[0].pageX,
    pageY: event.changedTouches[0].pageY,
    clientX: event.changedTouches[0].clientX,
    clientY: event.changedTouches[0].clientY,
    scrollX: state.scrollOffset.x,
    scrollY: state.scrollOffset.y,
    offsetX: state.offset.x,
    offsetY: state.offset.y,
    type: event.type,
    originalEvent: event,
    isTouch: true,
    altKey: false,
    ctrlKey: false,
    shiftKey: false,
    metaKey: false
  } : isScrollEvent(event) ? {
    pageX: state.pageOffset.x,
    pageY: state.pageOffset.y,
    clientX: state.clientOffset.x,
    clientY: state.clientOffset.y,
    scrollX: state.scrollOffset.x,
    scrollY: state.scrollOffset.y,
    offsetX: state.offset.x,
    offsetY: state.offset.y,
    type: event.type,
    originalEvent: event,
    altKey: false,
    ctrlKey: false,
    shiftKey: false,
    metaKey: false
  } : {
    pageX: event.pageX,
    pageY: event.pageY,
    clientX: event.clientX,
    clientY: event.clientY,
    offsetX: event.offsetX,
    offsetY: event.offsetY,
    scrollX: state.scrollOffset.x,
    scrollY: state.scrollOffset.y,
    type: event.type,
    ctrlKey: event.ctrlKey,
    shiftKey: event.shiftKey,
    altKey: event.altKey,
    metaKey: event.metaKey,
    originalEvent: event
  };
};
var noop2 = function() {
};
var dispatchDragAndDrop = function(state, action, callbacks) {
  if (callbacks === void 0) {
    callbacks = {};
  }
  var _a = callbacks.onIsPressedChange, onIsPressedChange = _a === void 0 ? noop2 : _a, _b = callbacks.onIsScrollingChange, onIsScrollingChange = _b === void 0 ? noop2 : _b, _c = callbacks.onVelocityChange, onVelocityChange = _c === void 0 ? noop2 : _c, _d = callbacks.onOffsetChange, onOffsetChange = _d === void 0 ? noop2 : _d, _e = callbacks.onPageOffsetChange, onPageOffsetChange = _e === void 0 ? noop2 : _e, _f = callbacks.onClientOffsetChange, onClientOffsetChange = _f === void 0 ? noop2 : _f, _g = callbacks.onScrollOffsetChange, onScrollOffsetChange = _g === void 0 ? noop2 : _g, _h = callbacks.onInitialScrollOffsetChange, onInitialScrollOffsetChange = _h === void 0 ? noop2 : _h;
  var drag = action.payload;
  var element3 = drag.element;
  var hint = drag.hint;
  var autoScrollDirection = state.autoScrollDirection;
  var overrideScrollableParent = state.scrollableParent;
  var event = normalizeEvent(action.event, state);
  switch (event.type) {
    case DRAG_AND_DROP_DISPATCH_ACTION.POINTER_DOWN:
      if (event.type === DRAG_AND_DROP_DISPATCH_ACTION.POINTER_DOWN && (!event.originalEvent.isPrimary || event.originalEvent.button !== 0)) {
        break;
      }
    case DRAG_AND_DROP_DISPATCH_ACTION.MOUSE_DOWN:
      if (event.type === DRAG_AND_DROP_DISPATCH_ACTION.MOUSE_DOWN && (event.originalEvent.which && event.originalEvent.which > 1) || state.ignoreMouse) {
        break;
      }
    case DRAG_AND_DROP_DISPATCH_ACTION.TOUCH_START:
      if (event.type === DRAG_AND_DROP_DISPATCH_ACTION.TOUCH_START && event.originalEvent.touches.length !== 1) {
        break;
      }
    case DRAG_AND_DROP_DISPATCH_ACTION.START: {
      var scrollableParent_1 = overrideScrollableParent || getScrollableParent(action.payload.element);
      onInitialScrollOffsetChange(scrollableParent_1 instanceof Window ? { x: scrollableParent_1.scrollX, y: scrollableParent_1.scrollY } : { x: scrollableParent_1.scrollLeft, y: scrollableParent_1.scrollTop });
      onClientOffsetChange({
        x: event.clientX,
        y: event.clientY
      });
      onPageOffsetChange({
        x: event.pageX,
        y: event.pageY
      });
      onOffsetChange({
        x: event.offsetX,
        y: event.offsetY
      });
      onIsPressedChange(true);
      if (drag.onPress) {
        drag.onPress(event);
      }
      break;
    }
    case DRAG_AND_DROP_DISPATCH_ACTION.SCROLL:
      if (event.type === DRAG_AND_DROP_DISPATCH_ACTION.SCROLL && !state.pressed) {
        break;
      }
      var scrollableParent = overrideScrollableParent || getScrollableParent(element3);
      var scrollOffset = scrollableParent instanceof Window ? { x: scrollableParent.scrollX, y: scrollableParent.scrollY } : { x: scrollableParent.scrollLeft, y: scrollableParent.scrollTop };
      event.scrollX = scrollOffset.x - state.initialScrollOffset.x;
      event.scrollY = scrollOffset.y - state.initialScrollOffset.y;
      onScrollOffsetChange({
        x: event.scrollX,
        y: event.scrollY
      });
    case DRAG_AND_DROP_DISPATCH_ACTION.POINTER_MOVE:
      if (event.type === DRAG_AND_DROP_DISPATCH_ACTION.POINTER_MOVE && !event.originalEvent.isPrimary) {
        break;
      }
    case DRAG_AND_DROP_DISPATCH_ACTION.MOUSE_MOVE:
    case DRAG_AND_DROP_DISPATCH_ACTION.TOUCH_MOVE:
      if (event.type === DRAG_AND_DROP_DISPATCH_ACTION.TOUCH_MOVE && event.originalEvent.touches.length !== 1) {
        break;
      }
    case DRAG_AND_DROP_DISPATCH_ACTION.MOVE: {
      if (state.pressed) {
        if (state.autoScroll && event.originalEvent.type !== "scroll") {
          if (element3) {
            var document_1 = getDocument2(element3);
            var scrollableParent_2 = overrideScrollableParent || getScrollableParent(document_1.elementFromPoint(event.clientX, event.clientY));
            var newVelocity = autoScrollVelocity(event.clientX, event.clientY, scrollableViewPort(scrollableParent_2, getWindow(element3)));
            onVelocityChange({
              x: autoScrollDirection && autoScrollDirection.horizontal === false ? 0 : newVelocity.x,
              y: autoScrollDirection && autoScrollDirection.vertical === false ? 0 : newVelocity.y
            });
            onIsScrollingChange(newVelocity.y !== 0 || newVelocity.x !== 0);
          }
        }
        if (!state.drag && drag.onDragStart) {
          drag.onDragStart(event);
        }
        if (drag.onDrag) {
          drag.onDrag(event);
        }
        var dropElement_1 = intersect(hint || element3, state.drops.map(function(drop2) {
          return drop2 && drop2.element;
        }).filter(function(d) {
          return d !== (hint || element3);
        }));
        var drop = state.drops.find(function(drop2) {
          return drop2.element === dropElement_1;
        });
        if (drop && dropElement_1 && isPointerInsideContainer(event.clientX, event.clientY, overrideScrollableParent || getScrollableParent(dropElement_1)) && dropElement_1 !== element3) {
          if ((state.drop && state.drop.element) !== dropElement_1) {
            if (state.drop && state.drop.onDragLeave) {
              state.drop.onDragLeave(event);
            }
            if (drop.onDragEnter) {
              drop.onDragEnter(event);
            }
          } else {
            if (drop.onDragOver) {
              drop.onDragOver(event);
            }
          }
        } else if (state.drop && state.drop.onDragLeave) {
          state.drop.onDragLeave(event);
        }
      }
      onClientOffsetChange({
        x: event.clientX,
        y: event.clientY
      });
      onPageOffsetChange({
        x: event.pageX,
        y: event.pageY
      });
      break;
    }
    case DRAG_AND_DROP_DISPATCH_ACTION.POINTER_UP:
      if (event.type === DRAG_AND_DROP_DISPATCH_ACTION.POINTER_UP && !event.originalEvent.isPrimary) {
        break;
      }
    case DRAG_AND_DROP_DISPATCH_ACTION.MOUSE_UP:
    case DRAG_AND_DROP_DISPATCH_ACTION.TOUCH_END:
      if (event.type === DRAG_AND_DROP_DISPATCH_ACTION.TOUCH_END && event.originalEvent.touches.length !== 1) {
        break;
      }
    case DRAG_AND_DROP_DISPATCH_ACTION.END: {
      onIsPressedChange(false);
      onIsScrollingChange(false);
      onScrollOffsetChange({ x: 0, y: 0 });
      if (drag.onRelease) {
        drag.onRelease(event);
      }
      if (state.drop && state.drop.onDrop) {
        state.drop.onDrop(event);
      }
      if (state.drag && drag.onDragEnd) {
        drag.onDragEnd(event);
      }
      break;
    }
    case DRAG_AND_DROP_DISPATCH_ACTION.POINTER_CANCEL:
    case DRAG_AND_DROP_DISPATCH_ACTION.CONTEXT_MENU:
    case DRAG_AND_DROP_DISPATCH_ACTION.TOUCH_CANCEL:
    case DRAG_AND_DROP_DISPATCH_ACTION.CANCEL: {
      onIsPressedChange(false);
      onIsScrollingChange(false);
      onScrollOffsetChange({ x: 0, y: 0 });
      if (drag.onDragEnd) {
        drag.onDragEnd(event);
      }
      if (state.drop && state.drop.onDragLeave) {
        state.drop.onDragLeave(event);
      }
      break;
    }
    default:
      break;
  }
};

// node_modules/@progress/kendo-draggable-common/dist/es/auto-scroll.js
var autoScroll = function(scrollableParent, vel) {
  if (!scrollableParent) {
    return;
  }
  var yIsScrollable;
  var xIsScrollable;
  var isRootNode = scrollableParent === scrollableRoot(scrollableParent);
  if (isRootNode) {
    yIsScrollable = document.body.scrollHeight > window.innerHeight;
    xIsScrollable = document.body.scrollWidth > window.innerWidth;
  } else {
    yIsScrollable = scrollableParent.offsetHeight <= scrollableParent.scrollHeight;
    xIsScrollable = scrollableParent.offsetWidth <= scrollableParent.scrollWidth;
  }
  var yDelta = scrollableParent.scrollTop + vel.y;
  var yInBounds = yIsScrollable && yDelta > 0 && yDelta < scrollableParent.scrollHeight;
  var xDelta = scrollableParent.scrollLeft + vel.x;
  var xInBounds = xIsScrollable && xDelta > 0 && xDelta < scrollableParent.scrollWidth;
  if (yInBounds) {
    scrollableParent.scrollTop += vel.y;
  } else if (yIsScrollable && yDelta < 0) {
    scrollableParent.scrollTop = 0;
  }
  if (xInBounds) {
    scrollableParent.scrollLeft += vel.x;
  } else if (xIsScrollable && xDelta < 0) {
    scrollableParent.scrollLeft = 0;
  }
};

// node_modules/@progress/kendo-react-common/dist/es/hooks/useInheritedState.js
var React19 = __toESM(require_react());
var useInheritedState = function(context, defaultValue) {
  var _a = React19.useContext(context), contextValue = _a[0], contextSetter = _a[1];
  var _b = React19.useState(defaultValue), localValue = _b[0], localSetter = _b[1];
  var value = contextValue !== void 0 ? contextValue : localValue;
  var handleValueChange = function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    contextValue !== void 0 ? contextSetter.apply(void 0, args) : localSetter(args[0]);
  };
  return [
    value,
    handleValueChange
  ];
};

// node_modules/@progress/kendo-react-common/dist/es/drag-n-drop/context/index.js
var React20 = __toESM(require_react());
var DragContext = React20.createContext([
  void 0,
  noop
]);
var DropContext = React20.createContext([
  void 0,
  noop
]);
var DragsContext = React20.createContext([[], noop, noop]);
var DropsContext = React20.createContext([[], noop, noop]);

// node_modules/@progress/kendo-react-common/dist/es/hooks/useDraggable.js
var IGNORE_MOUSE_TIMEOUT = 2e3;
function useDraggable(ref, callbacks, options) {
  if (options === void 0) {
    options = {};
  }
  var _a = callbacks.onPress, onPress = _a === void 0 ? noop : _a, _b = callbacks.onRelease, onRelease = _b === void 0 ? noop : _b, _c = callbacks.onDragStart, onDragStart = _c === void 0 ? noop : _c, _d = callbacks.onDrag, onDrag = _d === void 0 ? noop : _d, _e = callbacks.onDragEnd, onDragEnd = _e === void 0 ? noop : _e;
  var _f = options.hint, hint = _f === void 0 ? null : _f, _g = options.mouseOnly, mouseOnly = _g === void 0 ? false : _g, _h = options.autoScroll, autoScroll2 = _h === void 0 ? true : _h, _j = options.scrollContainer, scrollContainer = _j === void 0 ? null : _j;
  var _k = React21.useState(false), pressed = _k[0], setPressed = _k[1];
  var _l = React21.useState(false), scrolling = _l[0], setScrolling = _l[1];
  var drop = useInheritedState(DropContext)[0];
  var _m = useInheritedState(DragContext), drag = _m[0], setDrag = _m[1];
  var drops = React21.useContext(DropsContext)[0];
  var _o = React21.useContext(DragsContext), drags = _o[0], registerDrag = _o[1], deregisterDrag = _o[2];
  var velocity = React21.useRef({ x: 0, y: 0 });
  var scrollInterval = React21.useRef();
  var ignoreMouse = React21.useRef(false);
  var restoreMouseTimeout = React21.useRef();
  var scrollable = React21.useRef(null);
  var unmount = React21.useRef(false);
  var offset3 = React21.useRef({ x: 0, y: 0 });
  var pageOffset = React21.useRef({ x: 0, y: 0 });
  var clientOffset = React21.useRef({ x: 0, y: 0 });
  var initialClientOffset = React21.useRef({ x: 0, y: 0 });
  var scrollOffset = React21.useRef({ x: 0, y: 0 });
  var initialScrollOffset = React21.useRef({ x: 0, y: 0 });
  var supportPointerEvent = Boolean(typeof window !== "undefined" && window.PointerEvent);
  var pointers = !mouseOnly && supportPointerEvent;
  var getElement = React21.useCallback(function() {
    return ref.current && ref.current.element ? ref.current.element : ref.current;
  }, [ref]);
  var getHintElement = React21.useCallback(function() {
    return hint && hint.current && hint.current.element ? hint.current.element : hint ? hint.current : null;
  }, [hint]);
  var getScrollContainer = React21.useCallback(function() {
    return scrollContainer && scrollContainer.current && scrollContainer.current.element ? scrollContainer.current.element : scrollContainer ? scrollContainer.current : null;
  }, [scrollContainer]);
  var getAutoScrollContainer = React21.useCallback(function() {
    return typeof autoScroll2 === "object" && autoScroll2.boundaryElementRef && autoScroll2.boundaryElementRef.current && autoScroll2.boundaryElementRef.current.element ? autoScroll2.boundaryElementRef.current.element : typeof autoScroll2 === "object" && autoScroll2.boundaryElementRef && autoScroll2.boundaryElementRef.current ? autoScroll2.boundaryElementRef.current : null;
  }, [autoScroll2]);
  var target = React21.useRef(null);
  React21.useImperativeHandle(target, function() {
    return {
      element: getElement(),
      hint: getHintElement(),
      onPress: handlePress,
      onDragStart: handleDragStart,
      onDrag: handleDrag,
      onDragEnd: handleDragEnd,
      onRelease: handleRelease,
      data: ref.current
    };
  });
  var getDocument4 = React21.useCallback(function() {
    var element3 = getElement();
    return element3 ? element3.ownerDocument || document : document;
  }, [getElement]);
  var getWindow4 = React21.useCallback(function() {
    var document2 = getDocument4();
    return document2 ? document2.defaultView || window : window;
  }, [getDocument4]);
  var getState = React21.useCallback(function() {
    return {
      drag: drag ? drag.current : null,
      drop: drop ? drop.current : null,
      drags: drags.map(function(d) {
        return d.current;
      }),
      drops: drops.map(function(d) {
        return d.current;
      }),
      pressed,
      ignoreMouse: ignoreMouse.current,
      scrollOffset: scrollOffset.current,
      offset: offset3.current,
      pageOffset: pageOffset.current,
      initialScrollOffset: initialScrollOffset.current,
      clientOffset: clientOffset.current,
      initialClientOffset: initialClientOffset.current,
      velocity: velocity.current,
      autoScroll: Boolean(typeof autoScroll2 === "object" ? autoScroll2.enabled !== false : autoScroll2),
      scrollableParent: getAutoScrollContainer(),
      autoScrollDirection: typeof autoScroll2 === "object" ? autoScroll2.direction : { horizontal: true, vertical: true },
      isScrolling: scrolling
    };
  }, [drag, drop, drags, drops, pressed, autoScroll2, getAutoScrollContainer, scrolling]);
  var handlePressedChange = React21.useCallback(function(value) {
    setPressed(value);
  }, []);
  var handleScrollingChange = React21.useCallback(function(value) {
    setScrolling(value);
  }, []);
  var handleVelocityChange = React21.useCallback(function(value) {
    velocity.current = value;
  }, []);
  var handleOffsetChange = React21.useCallback(function(value) {
    offset3.current = value;
  }, []);
  var handleClientOffsetChange = React21.useCallback(function(value) {
    clientOffset.current = value;
  }, []);
  var handlePageOffsetChange = React21.useCallback(function(value) {
    pageOffset.current = value;
  }, []);
  var handleInitialClientOffsetChange = React21.useCallback(function(value) {
    initialClientOffset.current = value;
  }, []);
  var handleScrollOffsetChange = React21.useCallback(function(value) {
    scrollOffset.current = value;
  }, []);
  var handleInitialScrollOffsetChange = React21.useCallback(function(value) {
    initialScrollOffset.current = value;
  }, []);
  var handlePress = React21.useCallback(function(event) {
    onPress(event);
  }, [onPress]);
  var handleRelease = React21.useCallback(function(event) {
    onRelease(event);
  }, [onRelease]);
  var handleDragStart = React21.useCallback(function(event) {
    setDrag(target, { target: ref.current, event });
    onDragStart(event);
  }, [setDrag, ref, onDragStart]);
  var handleDrag = React21.useCallback(function(event) {
    onDrag(event);
  }, [onDrag]);
  var handleDragEnd = React21.useCallback(function(event) {
    if (unmount.current) {
      return;
    }
    setDrag(null, { target: ref.current, event });
    onDragEnd(event);
  }, [onDragEnd, setDrag, ref]);
  var dispatchDragEvent = React21.useCallback(function(event) {
    dispatchDragAndDrop(getState(), { event, payload: target.current }, {
      onVelocityChange: handleVelocityChange,
      onOffsetChange: handleOffsetChange,
      onClientOffsetChange: handleClientOffsetChange,
      onPageOffsetChange: handlePageOffsetChange,
      onInitialClientOffsetChange: handleInitialClientOffsetChange,
      onScrollOffsetChange: handleScrollOffsetChange,
      onInitialScrollOffsetChange: handleInitialScrollOffsetChange,
      onIsPressedChange: handlePressedChange,
      onIsScrollingChange: handleScrollingChange
    });
  }, [
    getState,
    handleVelocityChange,
    handleOffsetChange,
    handlePageOffsetChange,
    handleClientOffsetChange,
    handleInitialClientOffsetChange,
    handleInitialScrollOffsetChange,
    handlePressedChange,
    handleScrollOffsetChange,
    handleScrollingChange
  ]);
  var handlePointerDown = React21.useCallback(function(event) {
    dispatchDragEvent(event);
  }, [dispatchDragEvent]);
  var handlePointerMove = React21.useCallback(function(event) {
    dispatchDragEvent(event);
  }, [dispatchDragEvent]);
  var handlePointerCancel = React21.useCallback(function(event) {
    dispatchDragEvent(event);
  }, [dispatchDragEvent]);
  var handlePointerUp = React21.useCallback(function(event) {
    dispatchDragEvent(event);
  }, [dispatchDragEvent]);
  var handleMouseDown = React21.useCallback(function(event) {
    dispatchDragEvent(event);
  }, [dispatchDragEvent]);
  var handleMouseMove = React21.useCallback(function(event) {
    dispatchDragEvent(event);
  }, [dispatchDragEvent]);
  var handleMouseUp = React21.useCallback(function(event) {
    dispatchDragEvent(event);
  }, [dispatchDragEvent]);
  var handleContextMenu = React21.useCallback(function(event) {
    event.preventDefault();
    dispatchDragEvent(event);
  }, [dispatchDragEvent]);
  var handleTouchStart = React21.useCallback(function(event) {
    event.preventDefault();
    dispatchDragEvent(event);
  }, [dispatchDragEvent]);
  var handleTouchMove = React21.useCallback(function(event) {
    event.preventDefault();
    dispatchDragEvent(event);
  }, [dispatchDragEvent]);
  var handleTouchEnd = React21.useCallback(function(event) {
    if (event.touches.length === 0 && event.changedTouches.length === 1) {
      var currentWindow = getWindow4();
      ignoreMouse.current = true;
      restoreMouseTimeout.current = currentWindow.setTimeout(function() {
        ignoreMouse.current = false;
      }, IGNORE_MOUSE_TIMEOUT);
    }
    dispatchDragEvent(event);
  }, [dispatchDragEvent, getWindow4]);
  var handleScroll = React21.useCallback(function(event) {
    dispatchDragEvent(event);
  }, [dispatchDragEvent]);
  var prerequisites = React21.useCallback(function() {
    var element3 = getElement();
    if (element3) {
      var initialTouchAction_1 = element3.style.touchAction;
      element3.style.touchAction = "none";
      return function() {
        element3.style.touchAction = initialTouchAction_1;
      };
    }
  }, [getElement]);
  var register = React21.useCallback(function() {
    registerDrag(target);
    return function() {
      deregisterDrag(target);
    };
  }, [deregisterDrag, registerDrag]);
  var init = function() {
    var window2 = getWindow4();
    var element3 = getElement();
    var document2 = getDocument4();
    if (pointers) {
      if (element3) {
        scrollable.current = getScrollableParent(element3);
        if (scrollable.current) {
          scrollable.current.addEventListener("scroll", handleScroll, { passive: true });
        }
        element3.addEventListener("pointerdown", handlePointerDown, { passive: true });
      }
      if (pressed) {
        document2.addEventListener("pointermove", handlePointerMove);
        document2.addEventListener("pointerup", handlePointerUp, true);
        document2.addEventListener("contextmenu", handleContextMenu);
        document2.addEventListener("pointercancel", handlePointerCancel, { passive: true });
      }
    } else {
      window2.addEventListener("touchmove", noop, { capture: false, passive: false });
      if (element3) {
        element3.addEventListener("mousedown", handleMouseDown, { passive: true });
        if (!mouseOnly) {
          element3.addEventListener("touchstart", handleTouchStart, { passive: true });
          if (pressed) {
            element3.addEventListener("touchmove", handleTouchMove, { passive: true });
            element3.addEventListener("touchend", handleTouchEnd, { passive: true });
          }
        }
      }
      if (pressed) {
        document2.addEventListener("mousemove", handleMouseMove, { passive: true });
        document2.addEventListener("mouseup", handleMouseUp, { passive: true });
      }
    }
    return function() {
      if (scrollable.current) {
        scrollable.current.removeEventListener("scroll", handleScroll);
      }
      if (element3) {
        element3.removeEventListener("pointerdown", handlePointerDown);
        element3.removeEventListener("mousedown", handleMouseDown);
        element3.removeEventListener("touchstart", handleTouchStart);
        element3.removeEventListener("touchmove", handleTouchMove);
        element3.removeEventListener("touchend", handleTouchEnd);
      }
      document2.removeEventListener("pointermove", handlePointerMove);
      document2.removeEventListener("pointerup", handlePointerUp, true);
      document2.removeEventListener("contextmenu", handleContextMenu);
      document2.removeEventListener("pointercancel", handlePointerCancel);
      document2.removeEventListener("mousemove", handleMouseMove);
      document2.removeEventListener("mouseup", handleMouseUp);
      window2.removeEventListener("touchmove", noop);
      window2.clearTimeout(restoreMouseTimeout.current);
    };
  };
  React21.useEffect(function() {
    var window2 = getWindow4();
    if (scrolling) {
      var scrollableParent_1 = getScrollContainer() || getScrollableParent(document.elementFromPoint(clientOffset.current.x, clientOffset.current.y));
      window2.clearInterval(scrollInterval.current);
      scrollInterval.current = window2.setInterval(function() {
        autoScroll(scrollableParent_1, { x: velocity.current.x, y: velocity.current.y });
      }, 50);
    }
    return function() {
      window2.clearInterval(scrollInterval.current);
    };
  }, [getElement, getScrollContainer, getWindow4, scrolling]);
  React21.useEffect(prerequisites, [prerequisites]);
  React21.useEffect(init, [
    pressed,
    getWindow4,
    getElement,
    getDocument4,
    mouseOnly,
    pointers,
    handleContextMenu,
    handleMouseDown,
    handleMouseMove,
    handleMouseUp,
    handlePointerCancel,
    handlePointerDown,
    handlePointerMove,
    handlePointerUp,
    handleTouchEnd,
    handleTouchMove,
    handleTouchStart,
    handleScroll
  ]);
  React21.useEffect(function() {
    unmount.current = false;
    return function() {
      unmount.current = true;
    };
  }, []);
  React21.useLayoutEffect(register, [register]);
}

// node_modules/@progress/kendo-react-common/dist/es/hooks/useDroppable.js
var React22 = __toESM(require_react());
function useDroppable(ref, callbacks) {
  if (callbacks === void 0) {
    callbacks = {
      onDragEnter: noop,
      onDragOver: noop,
      onDragLeave: noop,
      onDrop: noop
    };
  }
  var _a = callbacks.onDragEnter, onDragEnter = _a === void 0 ? noop : _a, _b = callbacks.onDragOver, onDragOver = _b === void 0 ? noop : _b, _c = callbacks.onDragLeave, onDragLeave = _c === void 0 ? noop : _c, _d = callbacks.onDrop, onDrop = _d === void 0 ? noop : _d;
  var _e = useInheritedState(DropContext), setDrop = _e[1];
  var _f = React22.useContext(DropsContext), registerDrop = _f[1], deregisterDrop = _f[2];
  var getElement = React22.useCallback(function() {
    return ref.current && ref.current.element ? ref.current.element : ref.current;
  }, [ref]);
  var target = React22.useRef(null);
  React22.useImperativeHandle(target, function() {
    return {
      element: getElement(),
      onDragEnter: handleDragEnter,
      onDragOver: handleDragOver,
      onDragLeave: handleDragLeave,
      onDrop: handleDrop,
      data: ref.current
    };
  });
  var handleDragEnter = React22.useCallback(function(event) {
    setDrop(target, { target: ref.current, event });
    onDragEnter(event);
  }, [setDrop, ref, onDragEnter]);
  var handleDragOver = React22.useCallback(function(event) {
    onDragOver(event);
  }, [onDragOver]);
  var handleDragLeave = React22.useCallback(function(event) {
    setDrop(null, { target: ref.current, event });
    onDragLeave(event);
  }, [setDrop, ref, onDragLeave]);
  var handleDrop = React22.useCallback(function(event) {
    setDrop(null, { target: ref.current, event });
    onDrop(event);
  }, [setDrop, ref, onDrop]);
  var register = React22.useCallback(function() {
    registerDrop(target);
    return function() {
      deregisterDrop(target);
    };
  }, [deregisterDrop, registerDrop]);
  React22.useLayoutEffect(register, [register]);
}

// node_modules/@progress/kendo-react-common/dist/es/hooks/useControlledState.js
var React23 = __toESM(require_react());
var __assign5 = function() {
  __assign5 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p2 in s)
        if (Object.prototype.hasOwnProperty.call(s, p2))
          t[p2] = s[p2];
    }
    return t;
  };
  return __assign5.apply(this, arguments);
};
var useControlledState = function(defaultProp, prop, callback) {
  var _a = React23.useState(prop || defaultProp), state = _a[0], setState = _a[1];
  var handleSetEdit = React23.useCallback(function(value, args) {
    setState(value);
    if (callback) {
      callback.call(void 0, __assign5(__assign5({}, args), { value }));
    }
  }, [callback, setState]);
  return [prop !== void 0 ? prop : state, handleSetEdit];
};

// node_modules/@progress/kendo-react-common/dist/es/drag-n-drop/index.js
var DragAndDrop = function(props) {
  var _a = useControlledState(null, void 0), drag = _a[0], setDrag = _a[1];
  var _b = useControlledState(null, void 0), drop = _b[0], setDrop = _b[1];
  var _c = useCollection([]), drags = _c[0], dispatchDrags = _c[1];
  var _d = useCollection([]), drops = _d[0], dispatchDrops = _d[1];
  var registerDrag = function(item) {
    dispatchDrags({
      type: COLLECTION_ACTION.add,
      item
    });
  };
  var deregisterDrag = function(item) {
    dispatchDrags({
      type: COLLECTION_ACTION.remove,
      item
    });
  };
  var registerDrop = function(item) {
    dispatchDrops({
      type: COLLECTION_ACTION.add,
      item
    });
  };
  var deregisterDrop = function(item) {
    dispatchDrops({
      type: COLLECTION_ACTION.remove,
      item
    });
  };
  return React24.createElement(
    DragContext.Provider,
    { value: [drag, setDrag] },
    React24.createElement(
      DropContext.Provider,
      { value: [drop, setDrop] },
      React24.createElement(
        DragsContext.Provider,
        { value: [drags, registerDrag, deregisterDrag] },
        React24.createElement(DropsContext.Provider, { value: [drops, registerDrop, deregisterDrop] }, props.children)
      )
    )
  );
};
DragAndDrop.displayName = "KendoReactDragAndDrop";

// node_modules/@progress/kendo-react-common/dist/es/Draggable.js
var React25 = __toESM(require_react());
var Draggable = React25.forwardRef(function(props, ref) {
  var childRef = React25.useRef(null);
  var target = React25.useRef(null);
  var getElement = React25.useCallback(function() {
    return childRef.current && childRef.current.element ? childRef.current.element : childRef.current;
  }, [childRef]);
  React25.useImperativeHandle(target, function() {
    return { element: getElement() || null };
  });
  React25.useImperativeHandle(ref, function() {
    return target.current;
  });
  React25.useImperativeHandle(props.childRef, function() {
    return childRef.current;
  });
  var handlePress = React25.useCallback(function(event) {
    if (!props.onPress) {
      return;
    }
    props.onPress({
      element: getElement(),
      target: target.current,
      event
    });
  }, [getElement, props.onPress]);
  var handleRelease = React25.useCallback(function(event) {
    if (!props.onRelease) {
      return;
    }
    props.onRelease({
      element: getElement(),
      target: target.current,
      event
    });
  }, [getElement, props.onRelease]);
  var handleDragStart = React25.useCallback(function(event) {
    if (!props.onDragStart) {
      return;
    }
    props.onDragStart({
      element: getElement(),
      target: target.current,
      event
    });
  }, [props, getElement]);
  var handleDrag = React25.useCallback(function(event) {
    if (!props.onDrag) {
      return;
    }
    props.onDrag({
      element: getElement(),
      target: target.current,
      event
    });
  }, [getElement, props.onDrag]);
  var handleDragEnd = React25.useCallback(function(event) {
    if (!props.onDragEnd) {
      return;
    }
    props.onDragEnd({
      element: getElement(),
      target: target.current,
      event
    });
  }, [getElement, props.onDragEnd]);
  useDraggable(childRef, {
    onPress: handlePress,
    onRelease: handleRelease,
    onDragStart: handleDragStart,
    onDrag: handleDrag,
    onDragEnd: handleDragEnd
  }, {
    mouseOnly: props.mouseOnly,
    autoScroll: props.autoScroll,
    hint: props.hint,
    scrollContainer: props.scrollContainer
  });
  return props.children ? React25.cloneElement(React25.Children.only(props.children), { ref: childRef }) : null;
});
Draggable.displayName = "KendoReactDraggable";

// node_modules/@progress/kendo-react-common/dist/es/Droppable.js
var React26 = __toESM(require_react());
var Droppable = React26.forwardRef(function(props, ref) {
  var childRef = React26.useRef(null);
  var target = React26.useRef(null);
  var getElement = React26.useCallback(function() {
    return childRef.current && childRef.current.element ? childRef.current.element : childRef.current;
  }, [childRef]);
  React26.useImperativeHandle(target, function() {
    return { element: getElement() || void 0 };
  });
  React26.useImperativeHandle(ref, function() {
    return target.current;
  });
  React26.useImperativeHandle(props.childRef, function() {
    return childRef.current;
  });
  var handleDragEnter = React26.useCallback(function(event) {
    if (!props.onDragEnter) {
      return;
    }
    props.onDragEnter({
      element: getElement(),
      target: target.current,
      event
    });
  }, [props.onDragEnter, getElement]);
  var handleDragOver = React26.useCallback(function(event) {
    if (!props.onDragOver) {
      return;
    }
    props.onDragOver({
      element: getElement(),
      target: target.current,
      event
    });
  }, [getElement, props.onDragOver]);
  var handleDragLeave = React26.useCallback(function(event) {
    if (!props.onDragLeave) {
      return;
    }
    props.onDragLeave({
      element: getElement(),
      target: target.current,
      event
    });
  }, [props.onDragLeave, getElement]);
  var handleDrop = React26.useCallback(function(event) {
    if (!props.onDrop) {
      return;
    }
    props.onDrop({
      element: getElement(),
      target: target.current,
      event
    });
  }, [props.onDrop, getElement]);
  useDroppable(childRef, {
    onDragEnter: handleDragEnter,
    onDragOver: handleDragOver,
    onDragLeave: handleDragLeave,
    onDrop: handleDrop
  });
  return props.children ? React26.cloneElement(React26.Children.only(props.children), { ref: childRef }) : null;
});
Droppable.displayName = "KendoReactDroppable";

// node_modules/@progress/kendo-react-common/dist/es/theme.js
var kendoThemeMaps = {
  sizeMap: {
    small: "sm",
    medium: "md",
    large: "lg"
  },
  roundedMap: {
    small: "sm",
    medium: "md",
    large: "lg"
  },
  orientationMap: {
    vertical: "vstack",
    horizontal: "hstack"
  }
};

// node_modules/@progress/kendo-react-common/dist/es/navigation.js
var Navigation = (
  /** @class */
  function() {
    function Navigation2(options) {
      var _this = this;
      this.rovingTabIndex = true;
      this.update = function() {
      };
      this.focusNextIndex = function(target, indexDiff) {
        var all = _this.elements;
        var index = all.indexOf(target) + indexDiff;
        index = index < 0 ? all.length - 1 : index;
        var next = all[index % all.length];
        _this.focusElement(next, target);
        return next;
      };
      this.tabIndex = options.tabIndex || 0;
      this.root = options.root;
      this.selectors = options.selectors;
      this.focusOptions = options.focusOptions || { preventScroll: true };
      this.rovingTabIndex = options.rovingTabIndex !== void 0 ? options.rovingTabIndex : true;
      this.mouseEvents = options.mouseEvents || {};
      this.keyboardEvents = options.keyboardEvents || {};
    }
    Object.defineProperty(Navigation2.prototype, "elements", {
      /**
       * Returns the collection of DOM elements which the module will navigate in.
       */
      get: function() {
        return this.root.current ? Array.from(this.root.current.querySelectorAll(this.selectors.join(","))) : [];
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Navigation2.prototype, "first", {
      /**
       * Returns the first navigation DOM element.
       */
      get: function() {
        return this.root.current && this.root.current.querySelector(this.selectors.join(",")) || null;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Navigation2.prototype, "last", {
      /**
       * Returns the last navigation DOM element.
       */
      get: function() {
        var all = this.elements;
        return all[all.length - 1] || null;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Navigation2.prototype, "current", {
      /**
       * Returns the focused DOM element from the navigation collection of DOM elements.
       */
      get: function() {
        return this.elements.find(function(el) {
          return el.matches(":focus");
        }) || null;
      },
      enumerable: false,
      configurable: true
    });
    Navigation2.prototype.focusNext = function(target) {
      return this.focusNextIndex(target, 1);
    };
    Navigation2.prototype.focusPrevious = function(target) {
      return this.focusNextIndex(target, -1);
    };
    Navigation2.prototype.triggerKeyboardEvent = function(ev, options) {
      var target = ev.target instanceof Element && ev.target.closest(this.selectors.join(","));
      var key = ev.key === " " ? "Space" : ev.key;
      var eventType = ev.nativeEvent.type;
      if (target && this.keyboardEvents[eventType][key]) {
        this.keyboardEvents[eventType][key].call(void 0, target, this, ev, options);
      }
    };
    Navigation2.prototype.triggerMouseEvent = function(ev) {
      var target = ev.target instanceof Element && ev.target.closest(this.selectors.join(","));
      var eventType = ev.nativeEvent.type;
      if (target) {
        this.mouseEvents[eventType].call(void 0, target, this, ev);
      }
    };
    Navigation2.prototype.focusElement = function(element3, previous) {
      if (element3) {
        if (previous) {
          if (this.rovingTabIndex) {
            previous.removeAttribute("tabindex");
          }
          previous.classList.remove("k-focus");
        }
        if (this.rovingTabIndex) {
          element3.setAttribute("tabindex", String(this.tabIndex));
        }
        element3.focus(this.focusOptions);
      }
    };
    return Navigation2;
  }()
);

// node_modules/@progress/kendo-react-common/dist/es/getActiveElement.js
var getInnerActiveElement = function(element3) {
  var shadowRoot = element3.shadowRoot;
  var contentDocument = element3.contentDocument;
  if (shadowRoot && shadowRoot.activeElement) {
    return getInnerActiveElement(shadowRoot.activeElement);
  }
  if (contentDocument && contentDocument.activeElement) {
    return getInnerActiveElement(contentDocument.activeElement);
  }
  return element3;
};
var getActiveElement = function(document2) {
  if (!document2 || !document2.activeElement) {
    return void 0;
  }
  return getInnerActiveElement(document2.activeElement);
};

// node_modules/@progress/kendo-react-common/dist/es/tree-utils/misc.js
function getNestedValue(fieldName, dataItem) {
  var path = (fieldName || "").split(".");
  var data = dataItem;
  path.forEach(function(p2) {
    data = data ? data[p2] : void 0;
  });
  return data;
}

// node_modules/@progress/kendo-react-common/dist/es/tree-utils/FieldsService.js
var TreeFieldsService = (
  /** @class */
  function() {
    function TreeFieldsService2(treeViewProps) {
      this.expandField = treeViewProps.expandField;
      this.selectField = treeViewProps.selectField;
      this.hasChildrenField = treeViewProps.hasChildrenField;
      this.childrenField = treeViewProps.childrenField;
      this.textField = treeViewProps.textField;
      this.disableField = treeViewProps.disableField;
      this.checkField = treeViewProps.checkField;
      this.checkIndeterminateField = treeViewProps.checkIndeterminateField;
      this.focusIdField = treeViewProps.focusIdField;
    }
    TreeFieldsService2.prototype.expanded = function(item) {
      return getNestedValue(this.expandField, item);
    };
    TreeFieldsService2.prototype.selected = function(item) {
      return getNestedValue(this.selectField, item);
    };
    TreeFieldsService2.prototype.text = function(item) {
      return getNestedValue(this.textField, item);
    };
    TreeFieldsService2.prototype.disabled = function(item) {
      return getNestedValue(this.disableField, item);
    };
    TreeFieldsService2.prototype.hasChildren = function(item) {
      return getNestedValue(this.hasChildrenField, item);
    };
    TreeFieldsService2.prototype.children = function(item) {
      var children = getNestedValue(this.childrenField, item);
      return children ? children : [];
    };
    TreeFieldsService2.prototype.checked = function(item) {
      return getNestedValue(this.checkField, item);
    };
    TreeFieldsService2.prototype.checkIndeterminate = function(item) {
      return getNestedValue(this.checkIndeterminateField, item);
    };
    TreeFieldsService2.prototype.focusId = function(item) {
      return this.focusIdField && getNestedValue(this.focusIdField, item);
    };
    TreeFieldsService2.prototype.getChildrenField = function() {
      return this.childrenField;
    };
    return TreeFieldsService2;
  }()
);

// node_modules/@progress/kendo-react-common/dist/es/tree-utils/SortedPublicItemIds.js
var PROPS_COUNT_LIMIT = 5e4;
var SortedPublicItemIds = (
  /** @class */
  function() {
    function SortedPublicItemIds2() {
      this.objects = [];
    }
    SortedPublicItemIds2.prototype.init = function(publicItemIds) {
      var currentObj;
      for (var i = 0; i < publicItemIds.length; i++) {
        if (i % PROPS_COUNT_LIMIT === 0) {
          currentObj = {};
          this.objects.push(currentObj);
        }
        currentObj[publicItemIds[i]] = true;
      }
    };
    SortedPublicItemIds2.prototype.hasId = function(publicItemId) {
      return this.objects.some(function(obj) {
        return obj[publicItemId];
      });
    };
    return SortedPublicItemIds2;
  }()
);

// node_modules/@progress/kendo-react-buttons/dist/es/package-metadata.js
var packageMetadata = {
  name: "@progress/kendo-react-buttons",
  productName: "KendoReact",
  productCodes: ["KENDOUIREACT", "KENDOUICOMPLETE"],
  publishDate: 1700063497,
  version: "",
  licensingDocsUrl: "https://www.telerik.com/kendo-react-ui/my-license/?utm_medium=product&utm_source=kendoreact&utm_campaign=kendo-ui-react-purchase-license-keys-warning"
};

// node_modules/@progress/kendo-react-buttons/dist/es/Button.js
var __extends = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p2 in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p2))
          d2[p2] = b2[p2];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign6 = function() {
  __assign6 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p2 in s)
        if (Object.prototype.hasOwnProperty.call(s, p2))
          t[p2] = s[p2];
    }
    return t;
  };
  return __assign6.apply(this, arguments);
};
var __rest5 = function(s, e) {
  var t = {};
  for (var p2 in s)
    if (Object.prototype.hasOwnProperty.call(s, p2) && e.indexOf(p2) < 0)
      t[p2] = s[p2];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p2 = Object.getOwnPropertySymbols(s); i < p2.length; i++) {
      if (e.indexOf(p2[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p2[i]))
        t[p2[i]] = s[p2[i]];
    }
  return t;
};
function iconElement(_a) {
  var imageUrl = _a.imageUrl, name = _a.name, iconClass = _a.iconClass, svgIcon = _a.svgIcon, imageAlt = _a.imageAlt;
  if (imageUrl) {
    return React27.createElement("img", { role: "presentation", className: "k-button-icon", alt: imageAlt, src: imageUrl });
  } else if (name || svgIcon) {
    return React27.createElement(IconWrap, { className: "k-button-icon", name, icon: svgIcon });
  } else if (iconClass) {
    return React27.createElement("span", { role: "presentation", className: classNames("k-button-icon", iconClass) });
  }
  return null;
}
var Button = (
  /** @class */
  function(_super) {
    __extends(Button2, _super);
    function Button2(props) {
      var _this = _super.call(this, props) || this;
      _this._element = null;
      _this.handleClick = function(event) {
        _this.toggleIfApplicable();
        if (_this.props.onClick) {
          _this.props.onClick.call(void 0, event);
        }
      };
      validatePackage2(packageMetadata);
      _this.state = { selected: _this.props.togglable === true && _this.props.selected === true };
      return _this;
    }
    Object.defineProperty(Button2.prototype, "element", {
      /**
       * Gets the DOM element of the Button component.
       */
      get: function() {
        return this._element;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Button2.prototype, "selected", {
      /**
       * Returns `true` when the component is togglable and selected ([see example]({% slug toggleable_button %})).
       * Otherwise, returns `false`.
       */
      get: function() {
        return this._selectedTemp !== void 0 ? this._selectedTemp : this.state.selected;
      },
      enumerable: false,
      configurable: true
    });
    Button2.getDerivedStateFromProps = function(props, state) {
      if (props.togglable && props.selected !== void 0 && props.selected !== state.selected) {
        return { selected: props.selected };
      }
      return null;
    };
    Button2.prototype.render = function() {
      var _a;
      var _this = this;
      var _b = this.props, children = _b.children, togglable = _b.togglable, icon = _b.icon, iconClass = _b.iconClass, svgIcon = _b.svgIcon, imageUrl = _b.imageUrl, imageAlt = _b.imageAlt, className = _b.className, onClick = _b.onClick, _c = _b.size, size = _c === void 0 ? Button2.defaultProps.size : _c, _d = _b.rounded, rounded = _d === void 0 ? Button2.defaultProps.rounded : _d, _e = _b.fillMode, fillMode = _e === void 0 ? Button2.defaultProps.fillMode : _e, _f = _b.themeColor, themeColor = _f === void 0 ? Button2.defaultProps.themeColor : _f, htmlAttributes = __rest5(_b, ["children", "togglable", "icon", "iconClass", "svgIcon", "imageUrl", "imageAlt", "className", "onClick", "size", "rounded", "fillMode", "themeColor"]);
      var hasIcon = svgIcon !== void 0 || icon !== void 0 || iconClass !== void 0 || imageUrl !== void 0;
      var hasChildren = children !== void 0;
      var iconEl = iconElement({
        name: icon,
        svgIcon,
        iconClass,
        imageUrl,
        imageAlt
      });
      return React27.createElement(
        "button",
        __assign6({ ref: function(button) {
          return _this._element = button;
        }, "aria-pressed": togglable ? this.state.selected : void 0 }, htmlAttributes, { onClick: this.handleClick, className: classNames("k-button", (_a = {}, _a["k-button-".concat(kendoThemeMaps.sizeMap[size] || size)] = size, _a["k-button-".concat(fillMode)] = fillMode, _a["k-button-".concat(fillMode, "-").concat(themeColor)] = Boolean(fillMode && themeColor), _a["k-rounded-".concat(kendoThemeMaps.roundedMap[rounded] || rounded)] = rounded, _a["k-icon-button"] = !hasChildren && hasIcon, _a["k-disabled"] = this.props.disabled, _a["k-selected"] = this.state.selected, _a["k-rtl"] = this.props.dir === "rtl", _a), this.props.className) }),
        iconEl,
        children && React27.createElement("span", { className: "k-button-text" }, children)
      );
    };
    Button2.prototype.toggleIfApplicable = function() {
      var _this = this;
      if (this.props.togglable && this.props.selected === void 0) {
        var selected = !this.state.selected;
        this._selectedTemp = selected;
        this.setState({ selected }, function() {
          return _this._selectedTemp = void 0;
        });
      }
    };
    Button2.propTypes = {
      children: PropTypes5.node,
      selected: PropTypes5.bool,
      togglable: PropTypes5.bool,
      icon: PropTypes5.string,
      svgIcon: svgIconPropType,
      iconClass: PropTypes5.string,
      imageUrl: PropTypes5.string,
      imageAlt: PropTypes5.string,
      size: PropTypes5.oneOf([null, "small", "medium", "large"]),
      rounded: PropTypes5.oneOf([null, "small", "medium", "large", "full"]),
      fillMode: PropTypes5.oneOf([null, "flat", "link", "outline", "solid"]),
      // eslint-disable-next-line max-len
      themeColor: PropTypes5.oneOf([null, "base", "primary", "secondary", "tertiary", "info", "success", "warning", "error", "dark", "light", "inverse"])
    };
    Button2.defaultProps = {
      togglable: false,
      size: "medium",
      rounded: "medium",
      fillMode: "solid",
      themeColor: "base"
    };
    return Button2;
  }(React27.Component)
);

// node_modules/@progress/kendo-react-buttons/dist/es/ButtonGroup.js
var React28 = __toESM(require_react());
var PropTypes6 = __toESM(require_prop_types());

// node_modules/@progress/kendo-react-buttons/dist/es/util.js
var styles = {
  button: "k-button",
  "flat": "k-flat",
  "outline": "k-outline",
  "clear": "k-button-clear",
  "primary": "k-primary",
  "state-selected": "k-selected",
  "button-icon": "k-button-icon",
  "button-icontext": "k-button-icontext",
  "state-disabled": "k-disabled",
  "group-start": "k-group-start",
  "group-end": "k-group-end",
  "button-group": "k-button-group",
  "button-group-stretched": "k-button-group-stretched",
  "ltr": "k-ltr",
  "rtl": "k-rtl"
};
var noInnerButton = ":not(.k-dropdownlist button):not(.k-colorpicker button):not(.k-split-button .k-split-button-arrow)";
var toolbarButtons = [
  "button" + noInnerButton,
  ".k-button-group > button" + noInnerButton,
  ".k-colorpicker",
  ".k-dropdownlist"
];
var util_default = {
  styles
};

// node_modules/@progress/kendo-react-buttons/dist/es/ButtonGroup.js
var __extends2 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p2 in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p2))
          d2[p2] = b2[p2];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign7 = function() {
  __assign7 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p2 in s)
        if (Object.prototype.hasOwnProperty.call(s, p2))
          t[p2] = s[p2];
    }
    return t;
  };
  return __assign7.apply(this, arguments);
};
var styles2 = util_default.styles;
var ButtonGroup = (
  /** @class */
  function(_super) {
    __extends2(ButtonGroup2, _super);
    function ButtonGroup2(props) {
      var _this = _super.call(this, props) || this;
      _this._element = null;
      validatePackage2(packageMetadata);
      return _this;
    }
    ButtonGroup2.prototype.render = function() {
      var _a;
      var _this = this;
      var buttons = this.mapButtons(this.props.children);
      var groupClasses = classNames([styles2["button-group"]], (_a = {}, _a["k-disabled"] = this.props.disabled, _a[styles2["button-group-stretched"]] = !!this.props.width, _a), this.props.className);
      var groupProps = {
        className: groupClasses,
        style: { "width": "".concat(this.props.width) },
        dir: this.props.dir,
        // Accessibility properties
        role: "group",
        "aria-disabled": this.props.disabled
      };
      return React28.createElement("div", __assign7({ ref: function(div) {
        _this._element = div;
      } }, groupProps, { className: groupClasses }), buttons);
    };
    ButtonGroup2.prototype.mapButtons = function(children) {
      var _this = this;
      var count = React28.Children.count(children);
      var rtl = this.props.dir !== void 0 ? this.props.dir === "rtl" : this._element && getComputedStyle(this._element).direction === "rtl" || false;
      return React28.Children.map(children, function(child, index) {
        if (React28.isValidElement(child)) {
          return _this.renderButton(child, index, index === count - 1, rtl);
        }
        return child;
      });
    };
    ButtonGroup2.prototype.renderButton = function(child, index, isLast, isRtl) {
      var _a;
      var className = classNames(child.props.className, (_a = {}, _a[styles2["group-start"]] = isRtl ? isLast : index === 0, _a[styles2["group-end"]] = isRtl ? index === 0 : isLast, _a));
      var style = __assign7(__assign7({}, this.props.width ? { width: this.props.width } : {}), child.props.style || {});
      var disabled = this.props.disabled || child.props.disabled;
      var buttonProps = __assign7(__assign7(__assign7(__assign7({}, child.props), className ? { className } : {}), Object.keys(style).length ? { style } : {}), disabled !== void 0 ? { disabled } : {});
      return React28.Children.count(child.props.children) > 0 ? React28.cloneElement(child, buttonProps, child.props.children) : React28.cloneElement(child, buttonProps);
    };
    ButtonGroup2.propTypes = {
      children: PropTypes6.oneOfType([PropTypes6.arrayOf(PropTypes6.element), PropTypes6.element]),
      className: PropTypes6.string,
      disabled: PropTypes6.bool,
      width: PropTypes6.string,
      dir: PropTypes6.string
    };
    return ButtonGroup2;
  }(React28.Component)
);

// node_modules/@progress/kendo-react-buttons/dist/es/ListButton/SplitButton.js
var React33 = __toESM(require_react());
var PropTypes9 = __toESM(require_prop_types());

// node_modules/@progress/kendo-react-buttons/dist/es/ListButton/ButtonItem.js
var React29 = __toESM(require_react());
var ButtonItem = function(props) {
  var handleClick = React29.useCallback(function(event) {
    props.onClick(event, props.index);
  }, [props]);
  var As = props.dataItem.render || props.item || (props.item === void 0 ? props.render : null);
  var text = props.dataItem.text !== void 0 ? props.dataItem.text : props.textField ? props.dataItem[props.textField] : props.dataItem;
  var item = React29.createElement("li", { id: props.id, className: classNames("k-item", props.className, { "k-focus": props.focused }), tabIndex: -1, onClick: handleClick, onMouseDown: props.onDown, onPointerDown: props.onDown, role: "menuitem", "aria-disabled": props.dataItem.disabled || void 0 }, React29.createElement("span", { tabIndex: -1, className: classNames("k-link k-menu-link", {
    "k-selected": props.dataItem.selected,
    "k-disabled": props.dataItem.disabled
  }), key: "icon" }, As ? React29.createElement(As, { item: props.dataItem, itemIndex: props.index }) : React29.createElement(
    React29.Fragment,
    null,
    (props.dataItem.icon || props.dataItem.iconClass) && React29.createElement(IconWrap, { className: props.dataItem.iconClass, name: props.dataItem.icon, icon: props.dataItem.svgIcon }),
    props.dataItem.imageUrl && React29.createElement("img", { role: "presentation", alt: "", src: props.dataItem.imageUrl, className: "k-icon" }),
    text && React29.createElement("span", { className: "k-menu-link-text" }, text)
  )));
  return props.item !== void 0 && /* to be removed in 5.0.0 */
  props.render !== void 0 ? props.render.call(void 0, item, props) : item;
};
ButtonItem.displayName = "KendoReactButtonItem";

// node_modules/@progress/kendo-react-buttons/dist/es/ListButton/SplitButtonItem.js
var React30 = __toESM(require_react());
var PropTypes7 = __toESM(require_prop_types());
var __extends3 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p2 in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p2))
          d2[p2] = b2[p2];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var SplitButtonItem = (
  /** @class */
  function(_super) {
    __extends3(SplitButtonItem2, _super);
    function SplitButtonItem2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    SplitButtonItem2.prototype.render = function() {
      return null;
    };
    SplitButtonItem2.propTypes = {
      text: PropTypes7.string,
      icon: PropTypes7.string,
      iconClass: PropTypes7.string,
      imageUrl: PropTypes7.string,
      disabled: PropTypes7.bool,
      render: PropTypes7.any
    };
    return SplitButtonItem2;
  }(React30.Component)
);

// node_modules/@progress/kendo-react-buttons/dist/es/ListButton/utils/navigation.js
var navigate = function(focusedIndex, keyCode, altKey, total) {
  if (altKey) {
    return focusedIndex;
  }
  var index = Math.min(total - 1, Math.max(0, focusedIndex));
  switch (keyCode) {
    case Keys.enter:
    case Keys.space:
    case Keys.esc:
      return -1;
    case Keys.up:
    case Keys.left:
      return index - 1 < 0 ? total - 1 : index - 1;
    case Keys.down:
    case Keys.right:
      return index + 1 >= total ? 0 : index + 1;
    case Keys.home:
      return 0;
    case Keys.end:
      return total - 1;
    default:
      return focusedIndex;
  }
};

// node_modules/@progress/kendo-react-popup/dist/es/Popup.js
var React32 = __toESM(require_react());

// node_modules/@progress/kendo-react-popup/dist/es/PopupWithoutContext.js
var React31 = __toESM(require_react());
var ReactDOM2 = __toESM(require_react_dom());
var PropTypes8 = __toESM(require_prop_types());

// node_modules/@progress/kendo-react-popup/dist/es/animation.js
var clearSlide = function(element3) {
  element3.style.transitionDuration = "";
  Array.from(element3.classList).forEach(function(c) {
    if (c.startsWith("k-slide-")) {
      element3.classList.remove(c);
    }
  });
};
var firefox = typeof window !== "undefined" && /Firefox/.test(window.navigator.userAgent);
var slide = function(element3, direction, duration, type, callback) {
  if (duration === 0) {
    return callback();
  }
  var slideClass = "k-slide-" + direction + "-" + type;
  var slideActiveClass = slideClass + "-active";
  var transitionend = function(e) {
    if (e.target === element3) {
      element3.removeEventListener("transitionend", transitionend);
      clearSlide(element3);
      if (type === "exit") {
        element3.style.display = "none";
      } else {
        element3.style.display = "";
      }
      callback();
    }
  };
  element3.addEventListener("transitionend", transitionend);
  var ownerDocument2 = element3.ownerDocument;
  if (!ownerDocument2) {
    return;
  }
  var defaultView = ownerDocument2.defaultView;
  if (!defaultView) {
    return;
  }
  var animate = function() {
    clearSlide(element3);
    element3.classList.add(slideClass);
    defaultView.requestAnimationFrame(function() {
      element3.style.transitionDuration = duration + "ms";
      element3.classList.add(slideActiveClass);
    });
  };
  if (firefox) {
    defaultView.requestAnimationFrame(animate);
  } else {
    animate();
  }
};

// node_modules/@progress/kendo-popup-common/dist/es/align-point.js
var align_point_default = {
  "bottom": "bottom",
  "center": "center",
  "middle": "middle",
  "left": "left",
  "right": "right",
  "top": "top"
};

// node_modules/@progress/kendo-popup-common/dist/es/align.js
var align = function(options) {
  var anchorRect = options.anchorRect;
  var anchorAlign = options.anchorAlign;
  var elementRect = options.elementRect;
  var elementAlign = options.elementAlign;
  var margin = options.margin;
  if (margin === void 0)
    margin = {};
  var anchorHorizontal = anchorAlign.horizontal;
  var anchorVertical = anchorAlign.vertical;
  var elementHorizontal = elementAlign.horizontal;
  var elementVertical = elementAlign.vertical;
  var horizontalMargin = margin.horizontal || 0;
  var verticalMargin = margin.vertical || 0;
  var top = anchorRect.top;
  var left = anchorRect.left;
  if (anchorVertical === align_point_default.bottom) {
    top += anchorRect.height;
  }
  if (anchorVertical === align_point_default.center || anchorVertical === align_point_default.middle) {
    top += Math.round(anchorRect.height / 2);
  }
  if (elementVertical === align_point_default.bottom) {
    top -= elementRect.height;
    verticalMargin *= -1;
  }
  if (elementVertical === align_point_default.center || elementVertical === align_point_default.middle) {
    top -= Math.round(elementRect.height / 2);
    verticalMargin *= -1;
  }
  if (anchorHorizontal === align_point_default.right) {
    left += anchorRect.width;
  }
  if (anchorHorizontal === align_point_default.center || anchorHorizontal === align_point_default.middle) {
    left += Math.round(anchorRect.width / 2);
  }
  if (elementHorizontal === align_point_default.right) {
    left -= elementRect.width;
    horizontalMargin *= -1;
  }
  if (elementHorizontal === align_point_default.center || elementHorizontal === align_point_default.middle) {
    left -= Math.round(elementRect.width / 2);
    horizontalMargin *= -1;
  }
  return {
    top: top + verticalMargin,
    left: left + horizontalMargin
  };
};
var align_default = align;

// node_modules/@progress/kendo-popup-common/dist/es/add-scroll.js
function addScroll(rect, scroll) {
  return {
    top: rect.top + scroll.y,
    left: rect.left + scroll.x,
    height: rect.height,
    width: rect.width
  };
}

// node_modules/@progress/kendo-popup-common/dist/es/owner-document.js
function ownerDocument(element3) {
  return element3.ownerDocument || element3.document || element3;
}

// node_modules/@progress/kendo-popup-common/dist/es/window.js
var getWindow2 = function(element3) {
  return ownerDocument(element3).defaultView;
};
var window_default = getWindow2;

// node_modules/@progress/kendo-popup-common/dist/es/document.js
var getDocument3 = function(element3) {
  return ownerDocument(element3).documentElement;
};
var document_default = getDocument3;

// node_modules/@progress/kendo-popup-common/dist/es/scrollbar-width.js
var cachedWidth = 0;
function scrollbarWidth() {
  if (!cachedWidth && typeof document !== "undefined") {
    var div = document.createElement("div");
    div.style.cssText = "overflow:scroll;overflow-x:hidden;zoom:1;clear:both;display:block";
    div.innerHTML = "&nbsp;";
    document.body.appendChild(div);
    cachedWidth = div.offsetWidth - div.scrollWidth;
    document.body.removeChild(div);
  }
  return cachedWidth;
}

// node_modules/@progress/kendo-popup-common/dist/es/window-viewport.js
function windowViewport(element3) {
  var win = window_default(element3);
  var document2 = document_default(element3);
  var result = {
    height: win.innerHeight,
    width: win.innerWidth
  };
  if (document2.scrollHeight - document2.clientHeight > 0) {
    result.width -= scrollbarWidth();
  }
  return result;
}

// node_modules/@progress/kendo-popup-common/dist/es/bounding-offset.js
var boundingOffset = function(element3) {
  if (!element3.getBoundingClientRect) {
    var viewport = windowViewport(element3);
    return {
      bottom: viewport.height,
      left: 0,
      right: viewport.width,
      top: 0
    };
  }
  var ref = element3.getBoundingClientRect();
  var bottom = ref.bottom;
  var left = ref.left;
  var right = ref.right;
  var top = ref.top;
  return {
    bottom,
    left,
    right,
    top
  };
};
var bounding_offset_default = boundingOffset;

// node_modules/@progress/kendo-popup-common/dist/es/offset-parent.js
var offsetParent = function(element3) {
  var offsetParent2 = element3.offsetParent;
  while (offsetParent2 && offsetParent2.style.position === "static") {
    offsetParent2 = offsetParent2.offsetParent;
  }
  return offsetParent2 || document_default(element3);
};
var offset_parent_default = offsetParent;

// node_modules/@progress/kendo-popup-common/dist/es/offset.js
var rectOfHiddenElement = function(element3) {
  var ref = element3.style;
  var display = ref.display;
  var left = ref.left;
  var position4 = ref.position;
  element3.style.display = "";
  element3.style.left = "-10000px";
  element3.style.position = "absolute";
  var rect = element3.getBoundingClientRect();
  element3.style.display = display;
  element3.style.left = left;
  element3.style.position = position4;
  return rect;
};
var offset = function(element3) {
  var rect = element3.getBoundingClientRect();
  var left = rect.left;
  var top = rect.top;
  if (!rect.height && !rect.width) {
    rect = rectOfHiddenElement(element3);
  }
  return {
    top,
    left,
    height: rect.height,
    width: rect.width
  };
};
var offset_default = offset;

// node_modules/@progress/kendo-popup-common/dist/es/parents.js
function parents_default(element3, until) {
  var result = [];
  var next = element3.parentNode;
  while (next) {
    result.push(next);
    if (next === until) {
      break;
    }
    next = next.parentNode;
  }
  return result;
}

// node_modules/@progress/kendo-popup-common/dist/es/scroll-position.js
function scrollPosition(element3) {
  var documentElement = document_default(element3);
  var win = window_default(element3);
  return {
    x: win.pageXOffset || documentElement.scrollLeft || 0,
    y: win.pageYOffset || documentElement.scrollTop || 0
  };
}

// node_modules/@progress/kendo-popup-common/dist/es/element-scroll-position.js
function element_scroll_position_default(element3) {
  if (element3 === (element3.ownerDocument || {}).body) {
    return scrollPosition(element3);
  }
  return {
    x: element3.scrollLeft,
    y: element3.scrollTop
  };
}

// node_modules/@progress/kendo-popup-common/dist/es/parent-scroll-position.js
function parentScrollPosition(element3) {
  var parent = offset_parent_default(element3);
  return parent ? element_scroll_position_default(parent) : { x: 0, y: 0 };
}

// node_modules/@progress/kendo-popup-common/dist/es/position.js
var position = function(element3, parent) {
  var win = window_default(element3);
  var elementStyles = win.getComputedStyle(element3);
  var offset3 = offset_default(element3);
  var parentElement = parent || offset_parent_default(element3);
  var ownerDocument2 = element3.ownerDocument;
  var useRelative = parentElement !== ownerDocument2.body && parentElement !== ownerDocument2.documentElement;
  var parentOffset = { top: 0, left: 0 };
  if (elementStyles.position !== "fixed" && useRelative) {
    var parentStyles = win.getComputedStyle(parentElement);
    parentOffset = offset_default(parentElement);
    parentOffset.top += parseInt(parentStyles.borderTopWidth, 10);
    parentOffset.left += parseInt(parentStyles.borderLeftWidth, 10);
  }
  return {
    top: offset3.top - parentOffset.top,
    left: offset3.left - parentOffset.left,
    height: offset3.height,
    width: offset3.width
  };
};
var position_default = position;

// node_modules/@progress/kendo-popup-common/dist/es/offset-parent-scroll-position.js
function offset_parent_scroll_position_default(offsetParentElement, element3) {
  return (
    // eslint-disable-line no-arrow-condition
    offsetParentElement ? element_scroll_position_default(offsetParentElement) : parentScrollPosition(element3)
  );
}

// node_modules/@progress/kendo-popup-common/dist/es/position-with-scroll.js
function position_with_scroll_default(element3, parent, scale) {
  if (scale === void 0)
    scale = 1;
  var offsetParentElement = parent ? offset_parent_default(parent) : null;
  var ref = position_default(element3, offsetParentElement);
  var top = ref.top;
  var left = ref.left;
  var height = ref.height;
  var width = ref.width;
  var ref$1 = offset_parent_scroll_position_default(offsetParentElement, element3);
  var x = ref$1.x;
  var y = ref$1.y;
  var ownerDocument2 = element3.ownerDocument;
  var positionScale = offsetParentElement === ownerDocument2.body || offsetParentElement === ownerDocument2.documentElement ? 1 : scale;
  return {
    top: top + y * positionScale,
    left: left + x * positionScale,
    height,
    width
  };
}

// node_modules/@progress/kendo-popup-common/dist/es/remove-scroll.js
function removeScroll(rect, scroll) {
  return {
    top: rect.top - scroll.y,
    left: rect.left - scroll.x,
    height: rect.height,
    width: rect.width
  };
}

// node_modules/@progress/kendo-popup-common/dist/es/collision.js
var collision_default = {
  "fit": "fit",
  "flip": "flip",
  "none": "none"
};

// node_modules/@progress/kendo-popup-common/dist/es/restrict-to-view.js
var fit = function(position4, size, viewPortSize) {
  var output = 0;
  if (position4 + size > viewPortSize) {
    output = viewPortSize - (position4 + size);
  }
  if (position4 < 0) {
    output = -position4;
  }
  return output;
};
var flip = function(ref) {
  var offset3 = ref.offset;
  var size = ref.size;
  var anchorSize = ref.anchorSize;
  var viewPortSize = ref.viewPortSize;
  var anchorAlignPoint = ref.anchorAlignPoint;
  var elementAlignPoint = ref.elementAlignPoint;
  var margin = ref.margin;
  var output = 0;
  var isPositionCentered = elementAlignPoint === align_point_default.center || elementAlignPoint === align_point_default.middle;
  var isOriginCentered = anchorAlignPoint === align_point_default.center || anchorAlignPoint === align_point_default.middle;
  var marginToAdd = 2 * margin;
  if (elementAlignPoint !== anchorAlignPoint && !isPositionCentered && !isOriginCentered) {
    var isBeforeAnchor = anchorAlignPoint === align_point_default.top || anchorAlignPoint === align_point_default.left;
    if (offset3 < 0 && isBeforeAnchor) {
      output = size + anchorSize + marginToAdd;
      if (offset3 + output + size > viewPortSize) {
        output = 0;
      }
    } else if (offset3 >= 0 && !isBeforeAnchor) {
      if (offset3 + size > viewPortSize) {
        output += -(anchorSize + size + marginToAdd);
      }
      if (offset3 + output < 0) {
        output = 0;
      }
    }
  }
  return output;
};
var restrictToView = function(options) {
  var anchorRect = options.anchorRect;
  var anchorAlign = options.anchorAlign;
  var elementRect = options.elementRect;
  var elementAlign = options.elementAlign;
  var collisions = options.collisions;
  var viewPort = options.viewPort;
  var margin = options.margin;
  if (margin === void 0)
    margin = {};
  var elementTop = elementRect.top;
  var elementLeft = elementRect.left;
  var elementHeight = elementRect.height;
  var elementWidth = elementRect.width;
  var viewPortHeight = viewPort.height;
  var viewPortWidth = viewPort.width;
  var horizontalMargin = margin.horizontal || 0;
  var verticalMargin = margin.vertical || 0;
  var left = 0;
  var top = 0;
  var isVerticalFit = collisions.vertical === collision_default.fit;
  var isHorizontalFit = collisions.horizontal === collision_default.fit;
  var isVerticalFlip = collisions.vertical === collision_default.flip;
  var isHorizontalFlip = collisions.horizontal === collision_default.flip;
  if (isVerticalFit) {
    top += fit(elementTop, elementHeight, viewPortHeight);
  }
  if (isHorizontalFit) {
    left += fit(elementLeft, elementWidth, viewPortWidth);
  }
  if (isVerticalFlip) {
    top += flip({
      margin: verticalMargin,
      offset: elementTop,
      size: elementHeight,
      anchorSize: anchorRect.height,
      viewPortSize: viewPortHeight,
      anchorAlignPoint: anchorAlign.vertical,
      elementAlignPoint: elementAlign.vertical
    });
  }
  if (isHorizontalFlip) {
    left += flip({
      margin: horizontalMargin,
      offset: elementLeft,
      size: elementWidth,
      anchorSize: anchorRect.width,
      viewPortSize: viewPortWidth,
      anchorAlignPoint: anchorAlign.horizontal,
      elementAlignPoint: elementAlign.horizontal
    });
  }
  var flippedVertical = isVerticalFlip && top !== 0;
  var flippedHorizontal = isHorizontalFlip && left !== 0;
  var fittedVertical = isVerticalFit && top !== 0;
  var fittedHorizontal = isHorizontalFit && left !== 0;
  return {
    flipped: flippedHorizontal || flippedVertical,
    fitted: fittedVertical || fittedHorizontal,
    flip: {
      horizontal: flippedHorizontal,
      vertical: flippedVertical
    },
    fit: {
      horizontal: fittedHorizontal,
      vertical: fittedVertical
    },
    offset: {
      left,
      top
    }
  };
};
var restrict_to_view_default = restrictToView;

// node_modules/@progress/kendo-popup-common/dist/es/siblings.js
function siblings_default(element3) {
  var result = [];
  var sibling = element3.parentNode.firstElementChild;
  while (sibling) {
    if (sibling !== element3) {
      result.push(sibling);
    }
    sibling = sibling.nextElementSibling;
  }
  return result;
}

// node_modules/@progress/kendo-popup-common/dist/es/sibling-container.js
function sibling_container_default(anchor, container) {
  var parentElements = parents_default(anchor);
  var containerElement = container;
  var siblingElements;
  var result;
  while (containerElement) {
    siblingElements = siblings_default(containerElement);
    result = parentElements.reduce(
      function(list, p2) {
        return list.concat(siblingElements.filter(function(s) {
          return s === p2;
        }));
      },
      []
    )[0];
    if (result) {
      break;
    }
    containerElement = containerElement.parentElement;
  }
  return result;
}

// node_modules/@progress/kendo-popup-common/dist/es/utils.js
var eitherRect = function(rect, offset3) {
  if (!rect) {
    return { height: 0, left: offset3.left, top: offset3.top, width: 0 };
  }
  return rect;
};
var scaleRect = function(rect, scale) {
  if (!rect || scale === 1) {
    return rect;
  }
  return {
    height: rect.height / scale,
    left: rect.left / scale,
    top: rect.top / scale,
    width: rect.width / scale
  };
};
var removeStackingOffset = function(rect, stackingOffset) {
  if (!stackingOffset) {
    return rect;
  }
  var result = {
    height: rect.height,
    left: rect.left - stackingOffset.left,
    top: rect.top - stackingOffset.top,
    width: rect.width
  };
  return result;
};
function memoize(fun) {
  var result;
  var called = false;
  return function() {
    var args = [], len = arguments.length;
    while (len--)
      args[len] = arguments[len];
    if (called) {
      return result;
    }
    result = fun.apply(void 0, args);
    called = true;
    return result;
  };
}
var hasRelativeStackingContext = memoize(function(elementSource) {
  if (!canUseDOM2()) {
    return false;
  }
  var currentDocument = elementSource ? elementSource.ownerDocument : document;
  if (!currentDocument || !currentDocument.body) {
    return false;
  }
  var top = 10;
  var parent = currentDocument.createElement("div");
  parent.style.transform = "matrix(10, 0, 0, 10, 0, 0)";
  parent.innerHTML = '<div style="position: fixed; top: ' + top + 'px;">child</div>';
  currentDocument.body.appendChild(parent);
  var isDifferent = parent.children[0].getBoundingClientRect().top !== top;
  currentDocument.body.removeChild(parent);
  return isDifferent;
});
var canUseDOM2 = function() {
  return Boolean(
    // from fbjs
    typeof window !== "undefined" && window.document && window.document.createElement
  );
};
var utils = {
  eitherRect,
  scaleRect,
  removeStackingOffset,
  hasRelativeStackingContext,
  canUseDOM: canUseDOM2
};
var utils_default = utils;

// node_modules/@progress/kendo-popup-common/dist/es/dom-utils.js
var STYLES = [
  "font-size",
  "font-family",
  "font-stretch",
  "font-style",
  "font-weight",
  "line-height"
];
var addOffset = function(current, addition) {
  return {
    left: current.left + addition.left,
    top: current.top + addition.top
  };
};
var getWindow3 = function() {
  return utils_default.canUseDOM() ? window : null;
};
var getFontStyles = function(el) {
  var window2 = getWindow3();
  if (!window2 || !el) {
    return [];
  }
  var computedStyles = window2.getComputedStyle(el);
  return STYLES.map(function(font) {
    return { key: font, value: computedStyles[font] };
  });
};
var hasOffsetParent = function(el) {
  if (!el) {
    return false;
  }
  return Boolean(el.offsetParent);
};
var offset2 = function(el) {
  if (!el) {
    return null;
  }
  return offset_default(el);
};
var offsetAtPoint = function(element3, currentLocation) {
  if (!element3) {
    return null;
  }
  var ref = element3.style;
  var left = ref.left;
  var top = ref.top;
  var transition = ref.transition;
  element3.style.transition = "none";
  element3.style.left = currentLocation.left + "px";
  element3.style.top = currentLocation.top + "px";
  var currentOffset = offset_default(element3);
  element3.style.left = left;
  element3.style.top = top;
  element3.offsetHeight;
  element3.style.transition = transition;
  return currentOffset;
};
var position2 = function(element3, popupElement, scale) {
  if (!element3 || !popupElement) {
    return null;
  }
  var currentScale = scale || 1;
  return position_with_scroll_default(element3, popupElement, currentScale);
};
var OVERFLOW_REGEXP = /auto|scroll/;
var overflowElementStyle = function(element3) {
  return "" + element3.style.overflow + element3.style.overflowX + element3.style.overflowY;
};
var overflowComputedStyle = function(element3) {
  var styles3 = window.getComputedStyle(element3);
  return "" + styles3.overflow + styles3.overflowX + styles3.overflowY;
};
var overflowStyle = function(element3) {
  return overflowElementStyle(element3) || overflowComputedStyle(element3);
};
var scrollableParents = function(element3) {
  var parentElements = [];
  if (!utils_default.canUseDOM()) {
    return parentElements;
  }
  var parent = element3.parentElement;
  while (parent) {
    if (OVERFLOW_REGEXP.test(overflowStyle(parent)) || parent.hasAttribute("data-scrollable")) {
      parentElements.push(parent);
    }
    parent = parent.parentElement;
  }
  parentElements.push(window);
  return parentElements;
};
var getRelativeContextElement = function(el) {
  if (!el || !utils_default.hasRelativeStackingContext()) {
    return null;
  }
  var parent = el.parentElement;
  while (parent) {
    if (window.getComputedStyle(parent).transform !== "none") {
      return parent;
    }
    parent = parent.parentElement;
  }
  return null;
};
var stackingElementOffset = function(el) {
  var relativeContextElement = getRelativeContextElement(el);
  if (!relativeContextElement) {
    return null;
  }
  return offset_default(relativeContextElement);
};
var stackingElementScroll = function(el) {
  var relativeContextElement = getRelativeContextElement(el);
  if (!relativeContextElement) {
    return { x: 0, y: 0 };
  }
  return {
    x: relativeContextElement.scrollLeft,
    y: relativeContextElement.scrollTop
  };
};
var stackingElementViewPort = function(el) {
  var relativeContextElement = getRelativeContextElement(el);
  if (!relativeContextElement) {
    return null;
  }
  return {
    height: relativeContextElement.scrollHeight,
    width: relativeContextElement.scrollWidth
  };
};
var useRelativePosition = function(el) {
  return Boolean(getRelativeContextElement(el));
};
var zoomLevel = function() {
  if (!utils_default.canUseDOM()) {
    return 1;
  }
  return parseFloat((document.documentElement.clientWidth / window.innerWidth).toFixed(2)) || 1;
};
var isZoomed = function() {
  return zoomLevel() > 1;
};
var zIndex = function(anchor, container) {
  if (!anchor || !utils_default.canUseDOM()) {
    return null;
  }
  var sibling = sibling_container_default(anchor, container);
  if (!sibling) {
    return null;
  }
  var result = [anchor].concat(parents_default(anchor, sibling)).reduce(
    function(index, p2) {
      var zIndexStyle = p2.style.zIndex || window.getComputedStyle(p2).zIndex;
      var current = parseInt(zIndexStyle, 10);
      return current > index ? current : index;
    },
    0
  );
  return result ? result + 1 : null;
};
var domUtils = {
  addOffset,
  addScroll,
  align: align_default,
  boundingOffset: bounding_offset_default,
  getFontStyles,
  getWindow: getWindow3,
  hasOffsetParent,
  offset: offset2,
  offsetAtPoint,
  position: position2,
  removeScroll,
  restrictToView: restrict_to_view_default,
  scrollPosition,
  scrollableParents,
  getRelativeContextElement,
  stackingElementOffset,
  stackingElementScroll,
  stackingElementViewPort,
  useRelativePosition,
  windowViewPort: windowViewport,
  zoomLevel,
  isZoomed,
  zIndex
};
var dom_utils_default = domUtils;

// node_modules/@progress/kendo-popup-common/dist/es/align-element.js
var absoluteRect = function(anchor, element3, offset3, scale) {
  var scrollPos = elementScrollPosition(anchor, element3);
  var rect = utils_default.eitherRect(dom_utils_default.offset(anchor), offset3);
  var stackScale = 2 * scale;
  var stackScroll = dom_utils_default.stackingElementScroll(element3);
  if (scale !== 1 && stackScroll) {
    stackScroll.x /= stackScale;
    stackScroll.y /= stackScale;
  }
  var stackOffset = dom_utils_default.stackingElementOffset(element3);
  if (scale !== 1 && stackOffset) {
    stackOffset.left /= stackScale;
    stackOffset.top /= stackScale;
  }
  return dom_utils_default.removeScroll(
    dom_utils_default.addScroll(
      utils_default.removeStackingOffset(
        utils_default.scaleRect(rect, scale),
        stackOffset
      ),
      stackScroll
    ),
    scrollPos
  );
};
var relativeRect = function(anchor, element3, offset3, scale) {
  var rect = utils_default.eitherRect(dom_utils_default.position(anchor, element3, scale), offset3);
  return utils_default.scaleRect(rect, scale);
};
var elementScrollPosition = function(anchor, element3) {
  return anchor ? { x: 0, y: 0 } : dom_utils_default.scrollPosition(element3);
};
var alignElement = function(settings) {
  var anchor = settings.anchor;
  var element3 = settings.element;
  var anchorAlign = settings.anchorAlign;
  var elementAlign = settings.elementAlign;
  var margin = settings.margin;
  var offset3 = settings.offset;
  var positionMode = settings.positionMode;
  var scale = settings.scale;
  var currentScale = scale || 1;
  var fixedMode = positionMode === "fixed" || !dom_utils_default.hasOffsetParent(element3);
  var anchorRect = fixedMode ? absoluteRect(anchor, element3, offset3, currentScale) : relativeRect(anchor, element3, offset3, currentScale);
  var elementRect = utils_default.scaleRect(dom_utils_default.offset(element3), currentScale);
  var result = dom_utils_default.align({
    anchorAlign,
    anchorRect,
    elementAlign,
    elementRect,
    margin
  });
  return result;
};
var align_element_default = alignElement;

// node_modules/@progress/kendo-popup-common/dist/es/position-element.js
var positionElement = function(settings) {
  var anchor = settings.anchor;
  var currentLocation = settings.currentLocation;
  var element3 = settings.element;
  var anchorAlign = settings.anchorAlign;
  var elementAlign = settings.elementAlign;
  var collisions = settings.collisions;
  var margin = settings.margin;
  var scale = settings.scale;
  var currentScale = scale || 1;
  var elementOffset = dom_utils_default.offsetAtPoint(element3, currentLocation);
  var elementRect = utils_default.scaleRect(elementOffset, currentScale);
  var anchorOffset = utils_default.scaleRect(dom_utils_default.offset(anchor), currentScale);
  var anchorRect = utils_default.eitherRect(anchorOffset, currentLocation);
  var viewPort = settings.viewPort || dom_utils_default.windowViewPort(element3);
  viewPort.width = viewPort.width / currentScale;
  viewPort.height = viewPort.height / currentScale;
  var result = dom_utils_default.restrictToView({
    anchorAlign,
    anchorRect,
    collisions,
    elementAlign,
    elementRect,
    margin,
    viewPort
  });
  var offset3 = dom_utils_default.addOffset(currentLocation, result.offset);
  return {
    flip: result.flip,
    flipped: result.flipped,
    fit: result.fit,
    fitted: result.fitted,
    offset: offset3
  };
};
var position_element_default = positionElement;

// node_modules/@progress/kendo-react-popup/dist/es/util.js
var FRAME_DURATION = 1e3 / 60;
var throttle = function(func7, wait, options) {
  if (options === void 0) {
    options = {};
  }
  var timeout, context, args, result;
  var previous = 0;
  options = options || {};
  var later = function() {
    previous = options.leading === false ? 0 : (/* @__PURE__ */ new Date()).getTime();
    timeout = void 0;
    result = func7.apply(context, args);
    if (!timeout) {
      context = args = null;
    }
  };
  var throttled = function() {
    var now = (/* @__PURE__ */ new Date()).getTime();
    if (!previous && options.leading === false) {
      previous = now;
    }
    var remaining = wait - (now - previous);
    context = void 0;
    args = arguments;
    if (remaining <= 0 || remaining > wait) {
      if (timeout) {
        clearTimeout(timeout);
        timeout = void 0;
      }
      previous = now;
      result = func7.apply(context, args);
      if (!timeout) {
        context = args = null;
      }
    } else if (!timeout && options.trailing !== false) {
      timeout = window.setTimeout(later, remaining);
    }
    return result;
  };
  return throttled;
};

// node_modules/@progress/kendo-react-popup/dist/es/package-metadata.js
var packageMetadata2 = {
  name: "@progress/kendo-react-popup",
  productName: "KendoReact",
  productCodes: ["KENDOUIREACT", "KENDOUICOMPLETE"],
  publishDate: 1700063458,
  version: "",
  licensingDocsUrl: "https://www.telerik.com/kendo-react-ui/my-license/?utm_medium=product&utm_source=kendoreact&utm_campaign=kendo-ui-react-purchase-license-keys-warning"
};

// node_modules/@progress/kendo-react-popup/dist/es/PopupWithoutContext.js
var __extends4 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p2 in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p2))
          d2[p2] = b2[p2];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign8 = function() {
  __assign8 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p2 in s)
        if (Object.prototype.hasOwnProperty.call(s, p2))
          t[p2] = s[p2];
    }
    return t;
  };
  return __assign8.apply(this, arguments);
};
var DEFAULT_POPUP_ZINDEX = 100;
var ZINDEX_POPUP_STEP = 1;
function isEquivalent(a, b) {
  if (a === b) {
    return true;
  }
  if (!!a !== !!b) {
    return false;
  }
  var aProps = Object.getOwnPropertyNames(a);
  var bProps = Object.getOwnPropertyNames(b);
  if (aProps.length !== bProps.length) {
    return false;
  }
  for (var i = 0; i < aProps.length; i++) {
    var propName = aProps[i];
    if (a[propName] !== b[propName]) {
      return false;
    }
  }
  return true;
}
var DEFAULT_OFFSET = {
  left: -1e3,
  top: 0
};
var Status;
(function(Status2) {
  Status2["hiding"] = "hiding";
  Status2["hidden"] = "hidden";
  Status2["showing"] = "showing";
  Status2["shown"] = "shown";
  Status2["reposition"] = "reposition";
})(Status || (Status = {}));
var ANIMATION_CONTAINER = "k-animation-container";
var ANIMATION_CONTAINER_SHOWN = "k-animation-container-shown";
var ANIMATION_CONTAINER_CHILD = "k-child-animation-container";
var K_POPUP = "k-popup";
var PopupWithoutContext = (
  /** @class */
  function(_super) {
    __extends4(PopupWithoutContext2, _super);
    function PopupWithoutContext2(props) {
      var _this = _super.call(this, props) || this;
      _this.context = 0;
      _this.state = { current: Status.hidden, previous: Status.hidden, props: {} };
      _this._popup = null;
      _this.show = function(popup) {
        _this.setPosition(popup);
        _this.animate(popup.firstChild, "enter", _this.onOpened);
        _this.setState({ current: Status.shown, previous: _this.state.current });
      };
      _this.setPosition = function(popup) {
        var _a = _this.props, anchorAlign = _a.anchorAlign, popupAlign = _a.popupAlign, collision = _a.collision, offset3 = _a.offset, anchor = _a.anchor, margin = _a.margin, scale = _a.scale, positionMode = _a.positionMode;
        var _b = popup.style, width = _b.width, height = _b.height;
        popup.style.width = popup.offsetWidth + "px";
        popup.style.height = popup.offsetHeight + "px";
        var alignedOffset = align_element_default({
          anchor,
          anchorAlign,
          element: popup,
          elementAlign: popupAlign,
          offset: offset3,
          margin,
          positionMode,
          scale
        });
        var position4 = position_element_default({
          anchor,
          anchorAlign,
          element: popup,
          elementAlign: popupAlign,
          collisions: collision,
          currentLocation: alignedOffset,
          margin: _this.props.margin
        });
        popup.style.top = position4.offset.top + "px";
        popup.style.left = position4.offset.left + "px";
        popup.style.width = width;
        popup.style.height = height;
        _this._collisions = {
          fit: position4.fit,
          fitted: position4.fitted,
          flip: position4.flip,
          flipped: position4.flipped
        };
        if (_this.props.onPosition) {
          var event_1 = {
            target: _this,
            flipped: position4.flipped,
            fitted: position4.fitted
          };
          _this.props.onPosition.call(void 0, event_1);
        }
      };
      _this.onOpened = function() {
        var element3 = _this._popup;
        if (!element3) {
          return;
        }
        if (_this.props.show) {
          element3.classList.add(ANIMATION_CONTAINER_SHOWN);
        }
        _this.attachRepositionHandlers(element3);
        if (_this.props.onOpen) {
          _this.props.onOpen.call(void 0, { target: _this });
        }
      };
      _this.animate = function(element3, type, callback) {
        if (!_this.props.popupAlign) {
          return;
        }
        var animationDirection;
        var _a = _this.props.popupAlign, horizontal = _a.horizontal, vertical = _a.vertical;
        if (horizontal === "left" && vertical === "center") {
          animationDirection = "right";
        } else if (horizontal === "right" && vertical === "center") {
          animationDirection = "left";
        } else if (vertical === "top") {
          animationDirection = "down";
        } else {
          animationDirection = "up";
        }
        var flipPositions = {
          down: "up",
          up: "down",
          left: "right",
          right: "left"
        };
        if (_this._collisions && _this._collisions.flipped) {
          animationDirection = flipPositions[animationDirection];
        }
        slide(element3, animationDirection, _this.animationDuration[type], type, callback);
      };
      _this.onClosing = function(popup) {
        if (!_this.props.show) {
          popup.classList.remove(ANIMATION_CONTAINER_SHOWN);
        }
        _this.detachRepositionHandlers();
      };
      _this.onClosed = function() {
        if (_this.state.current === Status.hiding && _this.state.previous === Status.shown) {
          _this.setState({ current: Status.hidden, previous: _this.state.current });
        }
        if (_this.props.onClose) {
          _this.props.onClose.call(void 0, { target: _this });
        }
      };
      _this.getCurrentZIndex = function() {
        return _this.context ? _this.context + ZINDEX_POPUP_STEP : DEFAULT_POPUP_ZINDEX;
      };
      validatePackage2(packageMetadata2);
      _this.reposition = throttle(_this.reposition.bind(_this), FRAME_DURATION);
      return _this;
    }
    Object.defineProperty(PopupWithoutContext2.prototype, "element", {
      /**
       * Represents the Popup DOM element.
       */
      get: function() {
        return this._popup;
      },
      enumerable: false,
      configurable: true
    });
    PopupWithoutContext2.getDerivedStateFromProps = function(props, state) {
      var show = props.show, anchor = props.anchor, anchorAlign = props.anchorAlign, appendTo = props.appendTo, collision = props.collision, popupAlign = props.popupAlign, className = props.className, popupClass = props.popupClass, style = props.style, offset3 = props.offset, contentKey = props.contentKey;
      var nextState = __assign8(__assign8({}, state), { props: {
        show,
        anchor,
        anchorAlign,
        appendTo,
        collision,
        popupAlign,
        className,
        popupClass,
        style,
        offset: offset3,
        contentKey
      } });
      if (props.show) {
        if (state.current === Status.hidden || state.current === Status.hiding) {
          return __assign8(__assign8({}, nextState), { current: Status.showing, previous: state.current });
        }
        if (state.current === Status.showing) {
          return __assign8(__assign8({}, nextState), { current: Status.shown, previous: state.current });
        }
        if (state.current === Status.shown && (!isEquivalent(offset3, state.props.offset) || !isEquivalent(anchorAlign, state.props.anchorAlign) || !isEquivalent(appendTo, state.props.appendTo) || !isEquivalent(collision, state.props.collision) || !isEquivalent(popupAlign, state.props.popupAlign) || !isEquivalent(style, state.props.style) || anchor !== state.props.anchor || popupClass !== state.props.popupClass || className !== state.props.className)) {
          return __assign8(__assign8({}, nextState), { current: Status.reposition, previous: state.current });
        }
        return nextState;
      }
      if (state.current === Status.hiding || state.current === Status.hidden) {
        return __assign8(__assign8({}, nextState), { current: Status.hidden, previous: state.current });
      }
      return __assign8(__assign8({}, nextState), { current: Status.hiding, previous: state.current });
    };
    PopupWithoutContext2.prototype.componentDidUpdate = function(prevProps) {
      if (this.state.current === Status.showing && this._popup) {
        this.show(this._popup);
      } else if (this.state.current === Status.hiding && this._popup) {
        this.onClosing(this._popup);
        this.animate(this._popup.firstChild, "exit", this.onClosed);
      } else if (this.state.current === Status.reposition && this.state.previous === Status.shown) {
        this.setState({ current: Status.shown, previous: this.state.current });
      } else if (this.state.current === Status.shown && prevProps.contentKey !== this.props.contentKey && this._popup) {
        this.setPosition(this._popup);
      }
    };
    PopupWithoutContext2.prototype.componentDidMount = function() {
      if (this.state.current === Status.showing && this._popup) {
        this.show(this._popup);
      }
    };
    PopupWithoutContext2.prototype.componentWillUnmount = function() {
      this.detachRepositionHandlers();
    };
    PopupWithoutContext2.prototype.render = function() {
      var _this = this;
      var _a = this.props, children = _a.children, className = _a.className, popupClass = _a.popupClass, show = _a.show, id = _a.id, positionMode = _a.positionMode;
      var calculatedAppendTo = this.props.appendTo ? this.props.appendTo : canUseDOM ? this.props.anchor && this.props.anchor.ownerDocument ? this.props.anchor.ownerDocument.body : document.body : void 0;
      if (this.state.current === Status.reposition && this.state.previous === Status.shown && this._popup) {
        this.setPosition(this._popup);
      }
      var style = Object.assign({}, { position: positionMode, top: 0, left: -1e4 }, this.props.style || {});
      var closing = this.state.current === Status.hiding;
      if ((show || closing) && calculatedAppendTo) {
        var currentZIndex = this.getCurrentZIndex();
        var popupElement = React31.createElement(
          ZIndexContext.Provider,
          { value: currentZIndex },
          React31.createElement(
            "div",
            { className: classNames(ANIMATION_CONTAINER, className), id, ref: function(e) {
              return _this._popup = e;
            }, style: __assign8({ zIndex: currentZIndex }, style) },
            React31.createElement(
              "div",
              { className: classNames(ANIMATION_CONTAINER_CHILD), style: { transitionDelay: "0ms" } },
              React31.createElement("div", { role: this.props.role, className: classNames(K_POPUP, popupClass) }, children)
            )
          )
        );
        return this.props.appendTo !== null ? ReactDOM2.createPortal(popupElement, calculatedAppendTo) : popupElement;
      }
      return null;
    };
    Object.defineProperty(PopupWithoutContext2.prototype, "animationDuration", {
      get: function() {
        var animate = this.props.animate;
        var enter = 0;
        var exit = 0;
        if (animate) {
          if (animate === true) {
            enter = exit = 300;
          } else {
            enter = animate.openDuration || 0;
            exit = animate.closeDuration || 0;
          }
        }
        return { enter, exit };
      },
      enumerable: false,
      configurable: true
    });
    PopupWithoutContext2.prototype.attachRepositionHandlers = function(element3) {
      var _this = this;
      this.detachRepositionHandlers();
      this._scrollableParents = dom_utils_default.scrollableParents(this.props.anchor || element3);
      if (this._scrollableParents) {
        this._scrollableParents.map(function(p2) {
          return p2.addEventListener("scroll", _this.reposition);
        });
      }
      window.addEventListener("resize", this.reposition);
    };
    PopupWithoutContext2.prototype.detachRepositionHandlers = function() {
      var _this = this;
      if (this._scrollableParents) {
        this._scrollableParents.map(function(p2) {
          return p2.removeEventListener("scroll", _this.reposition);
        });
        this._scrollableParents = void 0;
      }
      window.removeEventListener("resize", this.reposition);
    };
    PopupWithoutContext2.prototype.reposition = function() {
      this.setState({ current: Status.reposition, previous: this.state.current });
    };
    PopupWithoutContext2.propTypes = {
      anchor: function(props) {
        var anchor = props.anchor;
        if (anchor && typeof anchor.nodeType !== "number") {
          return new Error("Invalid prop `anchor` supplied to `Kendo React Popup`. Validation failed.");
        }
        return null;
      },
      appendTo: function(props) {
        var element3 = props.appendTo;
        if (element3 && typeof element3.nodeType !== "number") {
          return new Error("Invalid prop `appendTo` supplied to `Kendo React Popup`. Validation failed.");
        }
        return null;
      },
      className: PropTypes8.oneOfType([
        PropTypes8.string,
        PropTypes8.arrayOf(PropTypes8.string),
        PropTypes8.object
      ]),
      id: PropTypes8.string,
      popupClass: PropTypes8.oneOfType([
        PropTypes8.string,
        PropTypes8.arrayOf(PropTypes8.string),
        PropTypes8.object
      ]),
      collision: PropTypes8.shape({
        horizontal: PropTypes8.oneOf([
          collision_default.fit,
          collision_default.flip,
          collision_default.none
        ]),
        vertical: PropTypes8.oneOf([
          collision_default.fit,
          collision_default.flip,
          collision_default.none
        ])
      }),
      anchorAlign: PropTypes8.shape({
        horizontal: PropTypes8.oneOf([
          align_point_default.left,
          align_point_default.center,
          align_point_default.right
        ]),
        vertical: PropTypes8.oneOf([
          align_point_default.top,
          align_point_default.center,
          align_point_default.bottom
        ])
      }),
      popupAlign: PropTypes8.shape({
        horizontal: PropTypes8.oneOf([
          align_point_default.left,
          align_point_default.center,
          align_point_default.right
        ]),
        vertical: PropTypes8.oneOf([
          align_point_default.top,
          align_point_default.center,
          align_point_default.bottom
        ])
      }),
      offset: PropTypes8.shape({
        left: PropTypes8.number,
        top: PropTypes8.number
      }),
      children: PropTypes8.oneOfType([
        PropTypes8.element,
        PropTypes8.node
      ]),
      show: PropTypes8.bool,
      animate: PropTypes8.oneOfType([
        PropTypes8.bool,
        PropTypes8.shape({
          openDuration: PropTypes8.number,
          closeDuration: PropTypes8.number
        })
      ]),
      margin: PropTypes8.shape({
        horizontal: PropTypes8.number,
        vertical: PropTypes8.number
      }),
      positionMode: PropTypes8.oneOf([
        "fixed",
        "absolute"
      ]),
      scale: PropTypes8.number,
      style: PropTypes8.object,
      onClose: PropTypes8.func,
      onPosition: PropTypes8.func,
      onOpen: PropTypes8.func
    };
    PopupWithoutContext2.defaultProps = {
      collision: {
        horizontal: collision_default.fit,
        vertical: collision_default.flip
      },
      anchorAlign: {
        horizontal: align_point_default.left,
        vertical: align_point_default.bottom
      },
      popupAlign: {
        horizontal: align_point_default.left,
        vertical: align_point_default.top
      },
      offset: DEFAULT_OFFSET,
      animate: true,
      show: false,
      margin: {
        horizontal: 0,
        vertical: 0
      },
      positionMode: "absolute"
    };
    PopupWithoutContext2.contextType = ZIndexContext;
    PopupWithoutContext2.displayName = "PopupComponent";
    return PopupWithoutContext2;
  }(React31.Component)
);

// node_modules/@progress/kendo-react-popup/dist/es/Popup.js
var __assign9 = function() {
  __assign9 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p2 in s)
        if (Object.prototype.hasOwnProperty.call(s, p2))
          t[p2] = s[p2];
    }
    return t;
  };
  return __assign9.apply(this, arguments);
};
var PopupPropsContext = React32.createContext(function(props) {
  return props;
});
var Popup = React32.forwardRef(function(props, ref) {
  var contextPropsCallback = React32.useContext(PopupPropsContext);
  var popupProps = contextPropsCallback.call(void 0, props);
  return React32.createElement(PopupWithoutContext, __assign9({ ref }, popupProps));
});
Popup.displayName = "Popup";

// node_modules/@progress/kendo-react-buttons/dist/es/ListButton/utils/popup.js
function getAnchorAlign(isDirectionRightToLeft) {
  var align2 = { horizontal: "left", vertical: "bottom" };
  if (isDirectionRightToLeft) {
    align2.horizontal = "right";
  }
  return align2;
}
function getPopupAlign(isDirectionRightToLeft) {
  var align2 = { horizontal: "left", vertical: "top" };
  if (isDirectionRightToLeft) {
    align2.horizontal = "right";
  }
  return align2;
}

// node_modules/@progress/kendo-svg-icons/dist/index.es.js
var caretAltDownIcon = {
  name: "caret-alt-down",
  content: '<path d="M256 352 128 160h256L256 352z" />',
  viewBox: "0 0 512 512"
};
var xCircleIcon = {
  name: "x-circle",
  content: '<path d="M256 32C132.3 32 32 132.3 32 256s100.3 224 224 224 224-100.3 224-224S379.7 32 256 32zm128 306.7L338.7 384 256 301.3 173.3 384 128 338.7l82.7-82.7-82.7-82.7 45.3-45.3 82.7 82.7 82.7-82.7 45.3 45.3-82.7 82.7 82.7 82.7z" />',
  viewBox: "0 0 512 512"
};

// node_modules/@progress/kendo-react-buttons/dist/es/ListButton/SplitButton.js
var __extends5 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p2 in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p2))
          d2[p2] = b2[p2];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var SplitButton = (
  /** @class */
  function(_super) {
    __extends5(SplitButton2, _super);
    function SplitButton2(props) {
      var _this = _super.call(this, props) || this;
      _this.state = {
        focused: false,
        focusedIndex: -1,
        opened: false
      };
      _this.wrapper = null;
      _this.mainButton = null;
      _this.list = null;
      _this.guid = guid();
      _this.skipFocus = false;
      _this.buttonsData = [];
      _this.onKeyDown = function(event) {
        var focusedIndex = _this.state.focusedIndex;
        if (event.altKey) {
          if (!_this.opened && event.keyCode === Keys.down) {
            _this.dispatchPopupEvent(event, true);
            _this.setState({ focusedIndex: 0 });
            _this.setOpen(true);
          } else if (_this.opened && event.keyCode === Keys.up) {
            _this.setState({ focusedIndex: -1 });
            _this.setOpen(false);
          }
          return;
        }
        var newState = void 0;
        if (event.keyCode === Keys.enter || event.keyCode === Keys.space) {
          event.preventDefault();
          _this.dispatchClickEvent(event, focusedIndex);
          if (focusedIndex >= 0) {
            newState = {
              focusedIndex: _this.opened ? -1 : 0
            };
            var notOpened = !_this.opened;
            _this.setOpen(notOpened);
            if (notOpened) {
              _this.dispatchPopupEvent(event, notOpened);
            }
          }
        } else if (_this.opened && event.keyCode === Keys.esc) {
          _this.setState({ focusedIndex: -1 });
          _this.setOpen(false);
          return;
        }
        if (_this.opened) {
          var newFocused = navigate(focusedIndex, event.keyCode, event.altKey, _this.buttonsData.length);
          if (newFocused !== focusedIndex) {
            newState = newState || {};
            newState.focusedIndex = newFocused;
          }
          var arrowKey = event.keyCode === Keys.up || event.keyCode === Keys.down || event.keyCode === Keys.left || event.keyCode === Keys.right;
          if (!event.altKey && (arrowKey || event.keyCode === Keys.home || event.keyCode === Keys.end)) {
            event.preventDefault();
          }
        }
        if (newState) {
          _this.setState(newState);
        }
      };
      _this.switchFocus = function(focusFn) {
        _this.skipFocus = true;
        focusFn();
        window.setTimeout(function() {
          return _this.skipFocus = false;
        }, 0);
      };
      _this.onFocus = function(event) {
        if (_this.skipFocus) {
          return;
        }
        dispatchEvent(_this.props.onFocus, event, _this, void 0);
        _this.setState({ focused: true });
      };
      _this.setOpen = function(value) {
        _this.openedDuringOnChange = value;
        _this.setState({ opened: value });
      };
      _this.onItemClick = function(event, clickedItemIndex) {
        var opened = _this.opened;
        if (opened) {
          _this.setState({ focusedIndex: 0 });
          _this.setOpen(false);
        }
        _this.dispatchClickEvent(event, clickedItemIndex);
      };
      _this.onBlur = function(event) {
        if (_this.skipFocus) {
          return;
        }
        _this.setState({
          focused: false,
          focusedIndex: -1
        });
        _this.setOpen(false);
        dispatchEvent(_this.props.onBlur, event, _this, void 0);
      };
      _this.onPopupClose = function() {
        if (_this.state.focused) {
          _this.switchFocus(function() {
            if (_this.element) {
              _this.element.removeAttribute("tabindex");
              _this.element.focus({ preventScroll: true });
            }
          });
        }
        _this.dispatchPopupEvent({}, false);
      };
      _this.listRef = function(list) {
        _this.list = list;
        if (list && _this.state.focused) {
          _this.switchFocus(function() {
            list.focus({ preventScroll: true });
            if (_this.element) {
              _this.element.tabIndex = -1;
            }
          });
        }
      };
      _this.onSplitPartClick = function(event) {
        if (_this.buttonsData.length) {
          var toOpen = !_this.opened;
          if (toOpen) {
            _this.dispatchPopupEvent(event, toOpen);
          }
          _this.setState({
            focusedIndex: toOpen ? 0 : -1,
            focused: true
          });
          _this.setOpen(toOpen);
        }
      };
      _this.onDownSplitPart = function(event) {
        event.preventDefault();
        var activeElement = getActiveElement(document);
        if (_this.element && activeElement !== _this.element && activeElement !== _this.list) {
          _this.element.focus();
        }
      };
      _this.onItemDown = function(event) {
        var activeElement = getActiveElement(document);
        if (activeElement === _this.list) {
          event.preventDefault();
        }
      };
      _this.dispatchPopupEvent = function(dispatchedEvent, open) {
        dispatchEvent(open ? _this.props.onOpen : _this.props.onClose, dispatchedEvent, _this, void 0);
        _this.openedDuringOnChange = void 0;
      };
      validatePackage2(packageMetadata);
      return _this;
    }
    Object.defineProperty(SplitButton2.prototype, "opened", {
      get: function() {
        return this.openedDuringOnChange !== void 0 ? this.openedDuringOnChange : this.props.opened === void 0 ? this.state.opened : this.props.opened;
      },
      enumerable: false,
      configurable: true
    });
    SplitButton2.prototype.render = function() {
      var _this = this;
      this.buttonsData = this.props.items || React33.Children.toArray(this.props.children).filter(function(child) {
        return child && child.type === SplitButtonItem;
      }).map(function(child) {
        return child.props;
      });
      var rtl = this.isRtl();
      var dir = rtl ? "rtl" : void 0;
      var _a = this.props, id = _a.id, style = _a.style, tabIndex = _a.tabIndex, disabled = _a.disabled;
      return React33.createElement(
        "div",
        { id, style, className: classNames("k-split-button", "k-button-group", {
          "k-focus": this.state.focused
        }, "k-rounded-".concat(kendoThemeMaps.roundedMap[this.props.rounded || "medium"]), this.props.className), onKeyDown: this.onKeyDown, onFocus: this.onFocus, onBlur: this.onBlur, dir, ref: function(el) {
          return _this.wrapper = el;
        } },
        React33.createElement(Button, { ref: function(el) {
          return _this.mainButton = el && el.element;
        }, type: "button", size: this.props.size, rounded: this.props.rounded, fillMode: this.props.fillMode, themeColor: this.props.themeColor, onClick: function(event) {
          return _this.onItemClick(event, -1);
        }, disabled: disabled || void 0, tabIndex, accessKey: this.props.accessKey, className: this.props.buttonClass, icon: this.props.icon, svgIcon: this.props.svgIcon, iconClass: this.props.iconClass, imageUrl: this.props.imageUrl, dir, "aria-disabled": disabled, "aria-haspopup": true, "aria-expanded": this.opened || void 0, "aria-label": this.props.ariaLabel, "aria-controls": this.opened ? this.guid : void 0, id: "button-" + this.guid, title: this.props.title }, this.props.text),
        React33.createElement(Button, { type: "button", size: this.props.size, rounded: this.props.rounded, fillMode: this.props.fillMode, themeColor: this.props.themeColor, icon: "caret-alt-down", svgIcon: caretAltDownIcon, className: "k-split-button-arrow", disabled: disabled || void 0, tabIndex: -1, onClick: this.onSplitPartClick, onMouseDown: this.onDownSplitPart, onPointerDown: this.onDownSplitPart, dir, "aria-label": "menu toggling button" }),
        this.renderPopup(rtl)
      );
    };
    SplitButton2.prototype.componentDidMount = function() {
      if (this.props.dir === void 0 && this.isRtl() || this.opened) {
        this.forceUpdate();
      }
    };
    Object.defineProperty(SplitButton2.prototype, "element", {
      /**
       * The DOM element of main button.
       */
      get: function() {
        return this.mainButton;
      },
      enumerable: false,
      configurable: true
    });
    SplitButton2.prototype.dispatchClickEvent = function(dispatchedEvent, clickedItemIndex) {
      if (!this.isItemDisabled(clickedItemIndex)) {
        if (clickedItemIndex === -1) {
          dispatchEvent(this.props.onButtonClick, dispatchedEvent, this, void 0);
        } else {
          dispatchEvent(this.props.onItemClick, dispatchedEvent, this, {
            item: this.buttonsData[clickedItemIndex],
            itemIndex: clickedItemIndex
          });
        }
      }
    };
    SplitButton2.prototype.renderPopup = function(rtl) {
      var _a;
      var _b = this.props.popupSettings, popupSettings = _b === void 0 ? {} : _b;
      var focusedIndex = this.state.focusedIndex;
      return React33.createElement(
        Popup,
        { anchor: this.wrapper, show: this.opened, animate: popupSettings.animate, popupClass: classNames("k-menu-popup", popupSettings.popupClass), anchorAlign: popupSettings.anchorAlign || getAnchorAlign(rtl), popupAlign: popupSettings.popupAlign || getPopupAlign(rtl), style: rtl ? { direction: "rtl" } : void 0, onClose: this.onPopupClose },
        React33.createElement("ul", { role: "menu", id: this.guid, "aria-labelledby": "button-" + this.guid, tabIndex: -1, ref: this.listRef, "aria-activedescendant": focusedIndex >= 0 ? "".concat(this.guid, "-").concat(focusedIndex) : void 0, className: classNames("k-group k-menu-group k-reset", (_a = {}, _a["k-menu-group-".concat(kendoThemeMaps.sizeMap[this.props.size] || this.props.size)] = this.props.size, _a)) }, this.renderChildItems())
      );
    };
    SplitButton2.prototype.renderChildItems = function() {
      var _this = this;
      var _a = this.props, item = _a.item, itemRender = _a.itemRender, textField = _a.textField;
      return this.buttonsData.length > 0 ? this.buttonsData.map(function(dataItem, index) {
        return React33.createElement(ButtonItem, { className: "k-menu-item", dataItem, textField, focused: _this.state.focusedIndex === index, onClick: _this.onItemClick, onDown: _this.onItemDown, render: itemRender, item, key: index, index, id: "".concat(_this.guid, "-").concat(index) });
      }) : null;
    };
    SplitButton2.prototype.isItemDisabled = function(index) {
      return this.buttonsData[index] ? this.buttonsData[index].disabled : this.props.disabled;
    };
    SplitButton2.prototype.isRtl = function() {
      return this.props.dir !== void 0 ? this.props.dir === "rtl" : !!this.wrapper && getComputedStyle(this.wrapper).direction === "rtl";
    };
    SplitButton2.propTypes = {
      accessKey: PropTypes9.string,
      ariaLabel: PropTypes9.string,
      title: PropTypes9.string,
      onButtonClick: PropTypes9.func,
      onFocus: PropTypes9.func,
      onBlur: PropTypes9.func,
      onItemClick: PropTypes9.func,
      onOpen: PropTypes9.func,
      onClose: PropTypes9.func,
      text: PropTypes9.string,
      items: PropTypes9.arrayOf(PropTypes9.any),
      textField: PropTypes9.string,
      tabIndex: PropTypes9.number,
      disabled: PropTypes9.bool,
      icon: PropTypes9.string,
      svgIcon: svgIconPropType,
      iconClass: PropTypes9.string,
      imageUrl: PropTypes9.string,
      popupSettings: PropTypes9.object,
      itemRender: PropTypes9.any,
      item: PropTypes9.func,
      className: PropTypes9.string,
      buttonClass: PropTypes9.string,
      dir: PropTypes9.string
    };
    SplitButton2.defaultProps = {
      size: "medium",
      rounded: "medium",
      fillMode: "solid",
      themeColor: "base"
    };
    return SplitButton2;
  }(React33.Component)
);

// node_modules/@progress/kendo-react-buttons/dist/es/ListButton/DropDownButton.js
var React35 = __toESM(require_react());
var PropTypes11 = __toESM(require_prop_types());

// node_modules/@progress/kendo-react-buttons/dist/es/ListButton/DropDownButtonItem.js
var React34 = __toESM(require_react());
var PropTypes10 = __toESM(require_prop_types());
var __extends6 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p2 in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p2))
          d2[p2] = b2[p2];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var DropDownButtonItem = (
  /** @class */
  function(_super) {
    __extends6(DropDownButtonItem2, _super);
    function DropDownButtonItem2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    DropDownButtonItem2.prototype.render = function() {
      return null;
    };
    DropDownButtonItem2.propTypes = {
      text: PropTypes10.string,
      icon: PropTypes10.string,
      iconClass: PropTypes10.string,
      imageUrl: PropTypes10.string,
      selected: PropTypes10.bool,
      disabled: PropTypes10.bool,
      render: PropTypes10.any
    };
    return DropDownButtonItem2;
  }(React34.Component)
);

// node_modules/@progress/kendo-react-buttons/dist/es/ListButton/DropDownButton.js
var __extends7 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p2 in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p2))
          d2[p2] = b2[p2];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign10 = function() {
  __assign10 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p2 in s)
        if (Object.prototype.hasOwnProperty.call(s, p2))
          t[p2] = s[p2];
    }
    return t;
  };
  return __assign10.apply(this, arguments);
};
var DropDownButton = (
  /** @class */
  function(_super) {
    __extends7(DropDownButton2, _super);
    function DropDownButton2(props) {
      var _this = _super.call(this, props) || this;
      _this.state = {
        opened: false,
        focused: false,
        focusedIndex: -1
      };
      _this.wrapper = null;
      _this.mainButton = null;
      _this.list = null;
      _this.skipFocus = false;
      _this.guid = guid();
      _this.buttonsData = [];
      _this.onKeyDown = function(event) {
        var focusedIndex = _this.state.focusedIndex;
        if (event.altKey) {
          if (!_this.opened && event.keyCode === Keys.down) {
            _this.setOpen(true);
            _this.dispatchPopupEvent(event, true);
            _this.setState({ focusedIndex: 0 });
          } else if (_this.opened && event.keyCode === Keys.up) {
            _this.setState({ focusedIndex: -1 });
            _this.setOpen(false);
          }
          return;
        }
        var newState = __assign10({}, _this.state);
        if (event.keyCode === Keys.enter || event.keyCode === Keys.space) {
          if (focusedIndex >= 0) {
            _this.dispatchClickEvent(event, focusedIndex);
          }
          event.preventDefault();
          var notOpened = !_this.opened;
          _this.setOpen(notOpened);
          if (notOpened) {
            _this.dispatchPopupEvent(event, true);
            _this.setState({ focusedIndex: _this.opened ? -1 : 0 });
          }
          return;
        } else if (_this.opened && event.keyCode === Keys.esc) {
          _this.setState({ focusedIndex: -1 });
          _this.setOpen(false);
          return;
        }
        if (_this.opened) {
          var newFocused = navigate(focusedIndex, event.keyCode, event.altKey, _this.buttonsData.length);
          newState.focusedIndex = newFocused;
          var arrowKey = event.keyCode === Keys.up || event.keyCode === Keys.down || event.keyCode === Keys.left || event.keyCode === Keys.right;
          if (!event.altKey && (arrowKey || event.keyCode === Keys.home || event.keyCode === Keys.end)) {
            event.preventDefault();
          }
        }
        _this.setState(newState);
      };
      _this.switchFocus = function(focusFn) {
        _this.skipFocus = true;
        focusFn();
        window.setTimeout(function() {
          return _this.skipFocus = false;
        }, 0);
      };
      _this.handleFocus = function(event) {
        if (_this.skipFocus) {
          return;
        }
        _this.setState({ focused: true, focusedIndex: _this.opened ? 0 : -1 });
        dispatchEvent(_this.props.onFocus, event, _this, void 0);
      };
      _this.handleBlur = function(event) {
        if (_this.skipFocus) {
          return;
        }
        _this.setState({ focused: false, focusedIndex: -1 });
        _this.setOpen(false);
        dispatchEvent(_this.props.onBlur, event, _this, void 0);
      };
      _this.setOpen = function(value) {
        _this.openedDuringOnChange = value;
        _this.setState({ opened: value });
      };
      _this.onItemClick = function(event, clickedItemIndex) {
        _this.setState({ focusedIndex: -1 });
        _this.setOpen(false);
        _this.dispatchClickEvent(event, clickedItemIndex);
      };
      _this.onItemDown = function(event) {
        var activeElement = getActiveElement(document);
        if (activeElement === _this.list) {
          event.preventDefault();
        }
      };
      _this.mouseDown = function(event) {
        event.preventDefault();
        var activeElement = getActiveElement(document);
        if (_this.element && activeElement !== _this.element && activeElement !== _this.list) {
          _this.element.focus();
        }
      };
      _this.onPopupClose = function() {
        if (_this.state.focused) {
          _this.switchFocus(function() {
            if (_this.element) {
              _this.element.removeAttribute("tabindex");
              _this.element.focus({ preventScroll: true });
            }
          });
        }
        _this.dispatchPopupEvent({}, false);
      };
      _this.listRef = function(list) {
        _this.list = list;
        if (list && _this.state.focused) {
          _this.switchFocus(function() {
            list.focus({ preventScroll: true });
            if (_this.element) {
              _this.element.tabIndex = -1;
            }
          });
        }
      };
      _this.onClickMainButton = function(event) {
        if (!_this.buttonsData.length) {
          return;
        }
        var toOpen = !_this.opened;
        _this.setState({
          focused: true,
          focusedIndex: toOpen ? 0 : -1
        });
        _this.setOpen(toOpen);
        if (toOpen) {
          _this.dispatchPopupEvent(event, toOpen);
        }
      };
      _this.dispatchPopupEvent = function(dispatchedEvent, open) {
        dispatchEvent(open ? _this.props.onOpen : _this.props.onClose, dispatchedEvent, _this, void 0);
        _this.openedDuringOnChange = void 0;
      };
      validatePackage2(packageMetadata);
      return _this;
    }
    Object.defineProperty(DropDownButton2.prototype, "opened", {
      get: function() {
        return this.openedDuringOnChange !== void 0 ? this.openedDuringOnChange : this.props.opened === void 0 ? this.state.opened : this.props.opened;
      },
      enumerable: false,
      configurable: true
    });
    DropDownButton2.prototype.render = function() {
      var _this = this;
      var rtl = this.isRtl();
      var dir = rtl ? "rtl" : void 0;
      var _a = this.props, id = _a.id, style = _a.style, tabIndex = _a.tabIndex, disabled = _a.disabled;
      this.buttonsData = this.props.items || React35.Children.toArray(this.props.children).filter(function(child) {
        return child && child.type === DropDownButtonItem;
      }).map(function(child) {
        return child.props;
      });
      return React35.createElement(
        "div",
        { id, style, className: classNames("k-dropdown-button", {
          "k-focus": this.state.focused
        }, this.props.className), onKeyDown: this.onKeyDown, onFocus: this.handleFocus, onBlur: this.handleBlur, dir, ref: function(el) {
          return _this.wrapper = el;
        } },
        React35.createElement(Button, { size: this.props.size, rounded: this.props.rounded, fillMode: this.props.fillMode, themeColor: this.props.themeColor, onClick: this.onClickMainButton, onMouseDown: this.mouseDown, disabled: disabled || void 0, tabIndex, accessKey: this.props.accessKey, icon: this.props.icon, svgIcon: this.props.svgIcon, iconClass: this.props.iconClass, className: this.props.buttonClass, imageUrl: this.props.imageUrl, dir, ref: function(btn) {
          return _this.mainButton = btn && btn.element;
        }, type: "button", "aria-haspopup": true, "aria-expanded": this.opened || void 0, "aria-label": this.props.ariaLabel, "aria-controls": this.opened ? this.guid : void 0, id: "button-" + this.guid, title: this.props.title }, this.props.text),
        this.renderPopup(rtl)
      );
    };
    DropDownButton2.prototype.componentDidMount = function() {
      if (this.props.dir === void 0 && this.isRtl() || this.opened) {
        this.forceUpdate();
      }
    };
    Object.defineProperty(DropDownButton2.prototype, "element", {
      /**
       * The DOM element of main button.
       */
      get: function() {
        return this.mainButton;
      },
      enumerable: false,
      configurable: true
    });
    DropDownButton2.prototype.dispatchClickEvent = function(dispatchedEvent, index) {
      if (!this.isItemDisabled(index)) {
        dispatchEvent(this.props.onItemClick, dispatchedEvent, this, {
          item: this.buttonsData[index],
          itemIndex: index
        });
      }
    };
    DropDownButton2.prototype.renderPopup = function(rtl) {
      var _a;
      var _b = this.props.popupSettings, popupSettings = _b === void 0 ? {} : _b;
      var focusedIndex = this.state.focusedIndex;
      return React35.createElement(
        Popup,
        { anchor: this.wrapper, show: this.opened, animate: popupSettings.animate, popupClass: classNames("k-menu-popup", popupSettings.popupClass), anchorAlign: popupSettings.anchorAlign || getAnchorAlign(rtl), popupAlign: popupSettings.popupAlign || getPopupAlign(rtl), style: rtl ? { direction: "rtl" } : void 0, onClose: this.onPopupClose },
        React35.createElement("ul", { role: "menu", id: this.guid, "aria-labelledby": "button-" + this.guid, tabIndex: -1, "aria-activedescendant": focusedIndex >= 0 ? "".concat(this.guid, "-").concat(focusedIndex) : void 0, ref: this.listRef, className: classNames("k-group k-menu-group k-reset", (_a = {}, _a["k-menu-group-".concat(kendoThemeMaps.sizeMap[this.props.size] || this.props.size)] = this.props.size, _a)) }, this.renderChildItems())
      );
    };
    DropDownButton2.prototype.renderChildItems = function() {
      var _this = this;
      var _a = this.props, item = _a.item, itemRender = _a.itemRender, textField = _a.textField;
      return this.buttonsData.length > 0 ? this.buttonsData.map(function(dataItem, index) {
        return React35.createElement(ButtonItem, { className: "k-menu-item", dataItem, textField, focused: _this.state.focusedIndex === index, onClick: _this.onItemClick, onDown: _this.onItemDown, render: itemRender, item, index, key: index, id: "".concat(_this.guid, "-").concat(index) });
      }) : null;
    };
    DropDownButton2.prototype.isItemDisabled = function(index) {
      return this.buttonsData[index] ? this.buttonsData[index].disabled : this.props.disabled;
    };
    DropDownButton2.prototype.isRtl = function() {
      return this.props.dir !== void 0 ? this.props.dir === "rtl" : !!this.wrapper && getComputedStyle(this.wrapper).direction === "rtl";
    };
    DropDownButton2.propTypes = {
      accessKey: PropTypes11.string,
      ariaLabel: PropTypes11.string,
      title: PropTypes11.string,
      onFocus: PropTypes11.func,
      onBlur: PropTypes11.func,
      onItemClick: PropTypes11.func,
      onOpen: PropTypes11.func,
      onClose: PropTypes11.func,
      items: PropTypes11.arrayOf(PropTypes11.any),
      textField: PropTypes11.string,
      tabIndex: PropTypes11.number,
      disabled: PropTypes11.bool,
      icon: PropTypes11.string,
      svgIcon: svgIconPropType,
      iconClass: PropTypes11.string,
      imageUrl: PropTypes11.string,
      popupSettings: PropTypes11.object,
      itemRender: PropTypes11.func,
      item: PropTypes11.func,
      className: PropTypes11.string,
      buttonClass: PropTypes11.string,
      dir: PropTypes11.string
    };
    DropDownButton2.defaultProps = {
      size: "medium",
      rounded: "medium",
      fillMode: "solid",
      themeColor: "base"
    };
    return DropDownButton2;
  }(React35.Component)
);

// node_modules/@progress/kendo-react-buttons/dist/es/toolbar/Toolbar.js
var React36 = __toESM(require_react());
var PropTypes12 = __toESM(require_prop_types());
var __extends8 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p2 in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p2))
          d2[p2] = b2[p2];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign11 = function() {
  __assign11 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p2 in s)
        if (Object.prototype.hasOwnProperty.call(s, p2))
          t[p2] = s[p2];
    }
    return t;
  };
  return __assign11.apply(this, arguments);
};
var Toolbar = (
  /** @class */
  function(_super) {
    __extends8(Toolbar2, _super);
    function Toolbar2(props) {
      var _this = _super.call(this, props) || this;
      _this._element = null;
      _this.offsetHeight = 0;
      _this.offsetWidth = 0;
      _this.buttons = [];
      _this.focusedSelector = _this.selectors.map(function(s) {
        return s + ":focus";
      }).join(",");
      _this.setTabIndex = function(focusedIndex) {
        var _a = _this.props.tabIndex, tabIndex = _a === void 0 ? Toolbar2.defaultProps.tabIndex : _a;
        _this.buttons.forEach(function(button, index) {
          button.tabIndex = index === focusedIndex ? tabIndex : -1;
        });
      };
      _this.onKeyDown = function(event) {
        var target = event.target;
        var arrowKey = event.keyCode === Keys.left || event.keyCode === Keys.right;
        if (!arrowKey || event.defaultPrevented || _this.buttons.findIndex(function(b) {
          return b === target;
        }) === -1) {
          return;
        }
        var focusedIndex = _this.focusedIndex;
        if (event.keyCode === Keys.left) {
          _this.focusButton(focusedIndex, focusedIndex - 1);
        } else {
          _this.focusButton(focusedIndex, focusedIndex + 1);
        }
      };
      _this.onWindowResize = function(event) {
        var element3 = _this.element;
        if (!element3) {
          return;
        }
        var offsetWidth = element3.offsetWidth;
        var offsetHeight = element3.offsetHeight;
        if (_this.offsetWidth !== offsetWidth || _this.offsetHeight !== offsetHeight) {
          _this.offsetWidth = offsetWidth;
          _this.offsetHeight = offsetHeight;
          var newSizes = { offsetWidth: _this.offsetWidth, offsetHeight: _this.offsetHeight };
          if (_this.props.onResize) {
            _this.props.onResize.call(void 0, __assign11(__assign11({ target: _this }, newSizes), { nativeEvent: event }));
          }
        }
      };
      validatePackage2(packageMetadata);
      return _this;
    }
    Object.defineProperty(Toolbar2.prototype, "selectors", {
      get: function() {
        return this.props.buttons || toolbarButtons;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Toolbar2.prototype, "focusedIndex", {
      get: function() {
        var focused = this.element && this.element.querySelector(this.focusedSelector);
        return Math.max(0, this.buttons.findIndex(function(e) {
          return e === focused;
        }));
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Toolbar2.prototype, "element", {
      /**
       * Returns the HTML element of the Toolbar component.
       */
      get: function() {
        return this._element;
      },
      enumerable: false,
      configurable: true
    });
    Toolbar2.prototype.componentDidMount = function() {
      window.addEventListener("resize", this.onWindowResize);
      var element3 = this.element;
      if (element3) {
        this.offsetWidth = element3.offsetWidth;
        this.offsetHeight = element3.offsetHeight;
        if (this.props.keyboardNavigation !== false) {
          this.buttons = Array.from(element3.querySelectorAll(this.selectors.join(",")));
          this.setTabIndex(0);
        }
      }
    };
    Toolbar2.prototype.componentDidUpdate = function() {
      var element3 = this.element;
      if (!element3 || this.props.keyboardNavigation === false) {
        return;
      }
      this.buttons = Array.from(element3.querySelectorAll(this.selectors.join(",")));
      this.setTabIndex(this.focusedIndex);
    };
    Toolbar2.prototype.componentWillUnmount = function() {
      window.removeEventListener("resize", this.onWindowResize);
      this.buttons.length = 0;
    };
    Toolbar2.prototype.render = function() {
      var _a;
      var _this = this;
      return React36.createElement("div", { id: this.props.id, "aria-label": this.props.ariaLabel, className: classNames("k-toolbar", (_a = {}, _a["k-toolbar-".concat(kendoThemeMaps.sizeMap[this.props.size] || this.props.size)] = this.props.size, _a), this.props.className), style: this.props.style, role: this.props.role !== void 0 ? this.props.role || void 0 : "toolbar", dir: this.props.dir, ref: function(element3) {
        return _this._element = element3;
      }, onKeyDown: this.props.keyboardNavigation !== false ? this.onKeyDown : void 0 }, this.props.children);
    };
    Toolbar2.prototype.focusButton = function(prevIndex, index) {
      var _a = this.props.tabIndex, tabIndex = _a === void 0 ? Toolbar2.defaultProps.tabIndex : _a;
      var button = this.buttons[index];
      if (button) {
        button.tabIndex = tabIndex;
        button.focus();
        var prevButton = this.buttons[prevIndex];
        if (prevButton) {
          prevButton.tabIndex = -1;
        }
      }
    };
    Toolbar2.propTypes = {
      tabIndex: PropTypes12.number,
      dir: PropTypes12.string,
      keyboardNavigation: PropTypes12.bool,
      style: PropTypes12.object,
      className: PropTypes12.string,
      role: PropTypes12.string,
      onResize: PropTypes12.func,
      buttons: PropTypes12.arrayOf(PropTypes12.string),
      size: PropTypes12.oneOf([null, "small", "medium", "large"])
    };
    Toolbar2.defaultProps = {
      tabIndex: 0,
      size: "medium"
    };
    return Toolbar2;
  }(React36.Component)
);

// node_modules/@progress/kendo-react-buttons/dist/es/toolbar/tools/ToolbarItem.js
var React37 = __toESM(require_react());
var PropTypes13 = __toESM(require_prop_types());
var __extends9 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p2 in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p2))
          d2[p2] = b2[p2];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ToolbarItem = (
  /** @class */
  function(_super) {
    __extends9(ToolbarItem2, _super);
    function ToolbarItem2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this._element = null;
      return _this;
    }
    Object.defineProperty(ToolbarItem2.prototype, "element", {
      /**
       * Returns the HTML element of the ToolbarItem component.
       */
      get: function() {
        return this._element;
      },
      enumerable: false,
      configurable: true
    });
    ToolbarItem2.prototype.render = function() {
      var _this = this;
      return React37.createElement("div", { id: this.props.id, className: classNames("k-toolbar-item", this.props.className), style: this.props.style, ref: function(e) {
        return _this._element = e;
      } }, this.props.children);
    };
    ToolbarItem2.propTypes = {
      className: PropTypes13.string
    };
    return ToolbarItem2;
  }(React37.PureComponent)
);

// node_modules/@progress/kendo-react-buttons/dist/es/toolbar/tools/ToolbarSeparator.js
var React38 = __toESM(require_react());
var __extends10 = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p2 in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p2))
          d2[p2] = b2[p2];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ToolbarSeparator = (
  /** @class */
  function(_super) {
    __extends10(ToolbarSeparator2, _super);
    function ToolbarSeparator2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ToolbarSeparator2.prototype.render = function() {
      return React38.createElement("div", { className: classNames("k-separator", this.props.className) });
    };
    return ToolbarSeparator2;
  }(React38.PureComponent)
);

// node_modules/@progress/kendo-react-buttons/dist/es/toolbar/tools/ToolbarSpacer.js
var React39 = __toESM(require_react());
var PropTypes14 = __toESM(require_prop_types());
var ToolbarSpacer = React39.forwardRef(function(props, ref) {
  var element3 = React39.useRef(null);
  var spacer = React39.useRef(null);
  React39.useImperativeHandle(spacer, function() {
    return { element: element3.current };
  });
  React39.useImperativeHandle(ref, function() {
    return { element: element3.current };
  });
  var className = React39.useMemo(function() {
    return classNames("k-spacer", props.className);
  }, [props.className]);
  return React39.createElement("span", { ref: element3, className });
});
ToolbarSpacer.displayName = "KendoReactToolbarSpacer";
ToolbarSpacer.propTypes = {
  className: PropTypes14.string
};

// node_modules/@progress/kendo-react-buttons/dist/es/Chip/Chip.js
var React41 = __toESM(require_react());
var PropTypes16 = __toESM(require_prop_types());

// node_modules/@progress/kendo-react-buttons/dist/es/Chip/ChipList.js
var React40 = __toESM(require_react());
var PropTypes15 = __toESM(require_prop_types());

// node_modules/@progress/kendo-react-buttons/dist/es/Chip/selection-reducer.js
var __spreadArray = function(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var SELECTION_TYPE;
(function(SELECTION_TYPE2) {
  SELECTION_TYPE2["single"] = "single";
  SELECTION_TYPE2["multiple"] = "multiple";
  SELECTION_TYPE2["none"] = "none";
})(SELECTION_TYPE || (SELECTION_TYPE = {}));
var SELECTION_ACTION;
(function(SELECTION_ACTION2) {
  SELECTION_ACTION2["toggle"] = "toggle";
  SELECTION_ACTION2["remove"] = "remove";
})(SELECTION_ACTION || (SELECTION_ACTION = {}));
var selectionReducer = function(state, action) {
  switch (action.selection) {
    case SELECTION_TYPE.single:
      switch (action.type) {
        case SELECTION_ACTION.toggle: {
          if (!Array.isArray(state) || state === null) {
            return action.payload === state ? null : action.payload;
          }
          throw new Error("State cannot be an array in single selection");
        }
        case SELECTION_ACTION.remove: {
          return action.payload === state ? null : state;
        }
        default:
          return state;
      }
    case SELECTION_TYPE.multiple:
      switch (action.type) {
        case SELECTION_ACTION.toggle: {
          if (Array.isArray(state)) {
            return state.some(function(i) {
              return i === action.payload;
            }) ? state.filter(function(i) {
              return i !== action.payload;
            }) : __spreadArray(__spreadArray([], state, true), [action.payload], false);
          }
          if (state === null) {
            return [action.payload];
          }
          throw new Error("State cannot be non-array in multiple selection");
        }
        case SELECTION_ACTION.remove: {
          if (Array.isArray(state)) {
            return state.some(function(i) {
              return i === action.payload;
            }) ? state.filter(function(i) {
              return i !== action.payload;
            }) : __spreadArray(__spreadArray([], state, true), [action.payload], false);
          }
          return state;
        }
        default:
          return state;
      }
    case SELECTION_TYPE.none:
      return null;
    default:
      return state;
  }
};

// node_modules/@progress/kendo-react-buttons/dist/es/Chip/focus-reducer.js
var FOCUS_ACTION;
(function(FOCUS_ACTION2) {
  FOCUS_ACTION2["next"] = "next";
  FOCUS_ACTION2["prev"] = "prev";
  FOCUS_ACTION2["current"] = "current";
  FOCUS_ACTION2["reset"] = "reset";
})(FOCUS_ACTION || (FOCUS_ACTION = {}));
var focusReducer = function(state, action) {
  var currentIndex = action.items.findIndex(function(i) {
    return i === state;
  });
  switch (action.type) {
    case FOCUS_ACTION.next:
      return currentIndex === action.items.length - 1 ? state : action.items[currentIndex + 1];
    case FOCUS_ACTION.prev:
      return currentIndex === 0 ? state : action.items[currentIndex - 1];
    case FOCUS_ACTION.current:
      return action.payload;
    case FOCUS_ACTION.reset:
      return null;
    default:
      return state;
  }
};

// node_modules/@progress/kendo-react-buttons/dist/es/Chip/data-reducer.js
var CHIP_DATA_ACTION;
(function(CHIP_DATA_ACTION2) {
  CHIP_DATA_ACTION2["remove"] = "remove";
  CHIP_DATA_ACTION2["add"] = "add";
  CHIP_DATA_ACTION2["reorder"] = "reorder";
})(CHIP_DATA_ACTION || (CHIP_DATA_ACTION = {}));
var dataReducer = function(state, action) {
  switch (action.type) {
    case CHIP_DATA_ACTION.add:
      break;
    case CHIP_DATA_ACTION.remove:
      return state.filter(function(i) {
        return i[action.valueField] !== action.payload;
      });
    case CHIP_DATA_ACTION.reorder:
      break;
    default:
      return state;
  }
};

// node_modules/@progress/kendo-react-buttons/dist/es/Chip/ChipList.js
var __assign12 = function() {
  __assign12 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p2 in s)
        if (Object.prototype.hasOwnProperty.call(s, p2))
          t[p2] = s[p2];
    }
    return t;
  };
  return __assign12.apply(this, arguments);
};
var ChipListSelectionContext = React40.createContext([null, function(_args) {
}]);
var ChipListFocusContext = React40.createContext([null, function(_args) {
}]);
var ChipListDataContext = React40.createContext([null, function(_args) {
}]);
var useSelection = function(defaultValue, args, callback) {
  var _a = React40.useState(defaultValue), state = _a[0], setState = _a[1];
  var handleDispatchSelection = function(action) {
    var newState = selectionReducer(args.state || state, __assign12(__assign12({}, action), args));
    if (callback) {
      callback(newState, action.event);
    }
    setState(newState);
  };
  return [state, handleDispatchSelection];
};
var useFocus = function(args) {
  var _a = React40.useState(null), state = _a[0], setState = _a[1];
  var handleDispatchFocus = function(action) {
    var newState = focusReducer(action.payload, __assign12(__assign12({}, action), args));
    setState(newState);
  };
  return [state, handleDispatchFocus];
};
var useData = function(defaultData, args, callback) {
  var _a = React40.useState(defaultData), state = _a[0], setState = _a[1];
  var handleDispatchData = function(action) {
    var newState = dataReducer(args.state || state, __assign12(__assign12({}, action), args));
    if (callback) {
      callback(newState, action.event);
    }
    setState(newState);
  };
  return [state, handleDispatchData];
};
var ChipList = React40.forwardRef(function(props, ref) {
  var _a;
  validatePackage2(packageMetadata);
  var target = React40.useRef(null);
  var chipListRef = React40.useRef(null);
  var dir = useDir(chipListRef, props.dir);
  var chip = props.chip, id = props.id, style = props.style, tabIndex = props.tabIndex, disabled = props.disabled, size = props.size, className = props.className, ariaDescribedBy = props.ariaDescribedBy, ariaLabelledBy = props.ariaLabelledBy, _b = props.selection, selection = _b === void 0 ? defaultProps3.selection : _b, _c = props.value, value = _c === void 0 ? defaultProps3.defaultValue : _c, _d = props.defaultData, defaultData = _d === void 0 ? defaultProps3.defaultData : _d, _e = props.valueField, valueField = _e === void 0 ? defaultProps3.valueField : _e, _f = props.textField, textField = _f === void 0 ? defaultProps3.textField : _f, onChange = props.onChange, onDataChange = props.onDataChange;
  var ChipComponent = React40.useMemo(function() {
    return chip || Chip;
  }, [chip, Chip]);
  React40.useImperativeHandle(target, function() {
    return {
      element: chipListRef.current,
      props
    };
  });
  React40.useImperativeHandle(ref, function() {
    return target.current;
  });
  var handleChange = React40.useCallback(function(newValue, event) {
    if (onChange && target.current) {
      onChange.call(void 0, {
        value: newValue,
        target: target.current,
        syntheticEvent: event
      });
    }
  }, [onChange]);
  var _g = useSelection(value, {
    selection,
    state: value
  }, handleChange), stateValue = _g[0], dispatchStateValue = _g[1];
  var handleDataChange = React40.useCallback(function(newData, event) {
    if (onDataChange && target.current) {
      onDataChange.call(void 0, {
        value: newData,
        target: target.current,
        syntheticEvent: event
      });
    }
  }, [onDataChange]);
  var _h = useData(props.data || defaultData, {
    state: props.data,
    valueField
  }, handleDataChange), stateData = _h[0], dispatchData = _h[1];
  var itemsReducer = React40.useCallback(function(acc, current) {
    acc.push(current[valueField]);
    return acc;
  }, [valueField]);
  var data = React40.useMemo(function() {
    return props.data || stateData;
  }, [props.data, stateData]);
  var chipValue = React40.useMemo(function() {
    return value || stateValue;
  }, [value, stateValue]);
  var items = React40.useMemo(function() {
    return data.reduce(itemsReducer, []);
  }, [data, itemsReducer]);
  var valueGetter = React40.useCallback(function(item) {
    return getter(valueField)(item);
  }, [valueField]);
  var textGetter = React40.useCallback(function(item) {
    return getter(textField)(item);
  }, [textField]);
  var _j = useFocus({ items }), focus = _j[0], dispatchFocus = _j[1];
  var mouseProps = useMouse(props, target);
  return React40.createElement(
    ChipListSelectionContext.Provider,
    { value: [chipValue, dispatchStateValue] },
    React40.createElement(
      ChipListFocusContext.Provider,
      { value: [focus, dispatchFocus] },
      React40.createElement(
        ChipListDataContext.Provider,
        { value: [data, dispatchData] },
        React40.createElement("div", __assign12({ ref: chipListRef }, mouseProps, { role: "listbox", id, dir, style, tabIndex: getTabIndex(tabIndex, disabled, void 0), className: classNames("k-chip-list", (_a = {
          "k-rtl": dir === "rtl",
          "k-disabled": disabled
        }, _a["k-chip-list-".concat(kendoThemeMaps.sizeMap[size] || size)] = size, _a), className), "aria-labelledby": ariaLabelledBy, "aria-describedby": ariaDescribedBy }), data.map(function(item, index) {
          return React40.createElement(ChipComponent, { role: "option", dataItem: item, size, key: [valueGetter(item), index].join("-"), text: textGetter(item), value: valueGetter(item), ariaLabel: item.ariaLabel, svgIcon: item.svgIcon || void 0 });
        }))
      )
    )
  );
});
var propTypes = {
  id: PropTypes15.string,
  className: PropTypes15.string,
  tabIndex: PropTypes15.number,
  data: PropTypes15.any,
  defaultData: PropTypes15.arrayOf(PropTypes15.any),
  onDataChange: PropTypes15.func,
  value: PropTypes15.oneOfType([PropTypes15.any, PropTypes15.arrayOf(PropTypes15.any)]),
  defaultValue: PropTypes15.oneOfType([PropTypes15.any, PropTypes15.arrayOf(PropTypes15.any)]),
  onChange: PropTypes15.func,
  selection: PropTypes15.oneOf(["single", "none", "multiple"]),
  textField: PropTypes15.string,
  valueField: PropTypes15.string,
  disabled: PropTypes15.bool,
  dir: PropTypes15.oneOf(["ltr", "rtl"]),
  ariaLabelledBy: PropTypes15.string,
  ariaDescribedBy: PropTypes15.string,
  size: PropTypes15.oneOf([null, "small", "medium", "large"])
};
var defaultProps3 = {
  chip: Chip,
  size: "medium",
  disabled: false,
  defaultValue: null,
  defaultData: [],
  dir: "ltr",
  selection: "none",
  textField: "text",
  valueField: "value",
  removable: "removable"
};
ChipList.displayName = "KendoReactChipList";
ChipList.propTypes = propTypes;
ChipList.defaultProps = defaultProps3;

// node_modules/@progress/kendo-react-buttons/dist/es/Chip/Chip.js
var __assign13 = function() {
  __assign13 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p2 in s)
        if (Object.prototype.hasOwnProperty.call(s, p2))
          t[p2] = s[p2];
    }
    return t;
  };
  return __assign13.apply(this, arguments);
};
var Chip = React41.forwardRef(function(props, ref) {
  var _a;
  validatePackage2(packageMetadata);
  var target = React41.useRef(null);
  var chipRef = React41.useRef(null);
  var dir = useDir(chipRef, props.dir);
  React41.useImperativeHandle(target, function() {
    return {
      element: chipRef.current,
      props
    };
  });
  React41.useImperativeHandle(ref, function() {
    return target.current;
  });
  var _b = React41.useContext(ChipListSelectionContext), selection = _b[0], dispatchSelection = _b[1];
  var _c = React41.useContext(ChipListFocusContext), focus = _c[0], dispatchFocus = _c[1];
  var _d = React41.useContext(ChipListDataContext), dispatchData = _d[1];
  var selected = React41.useMemo(function() {
    return props.selected || (Array.isArray(selection) ? selection.some(function(i) {
      return i === props.value;
    }) : selection === props.value);
  }, [props.selected, props.value, selection]);
  var focused = React41.useMemo(function() {
    return focus === props.value;
  }, [props.value, focus]);
  React41.useEffect(function() {
    if (focused && chipRef.current) {
      chipRef.current.focus();
    }
  }, [focused]);
  var handleClick = React41.useCallback(function(event) {
    dispatchSelection({ type: SELECTION_ACTION.toggle, payload: props.value, event });
  }, [dispatchSelection, props.value]);
  var handleRemove = React41.useCallback(function(event) {
    if (!props.removable) {
      return;
    }
    dispatchData({ type: CHIP_DATA_ACTION.remove, payload: props.value, event });
    dispatchFocus({ type: FOCUS_ACTION.reset, payload: props.value, event });
    dispatchSelection({ type: SELECTION_ACTION.remove, payload: props.value, event });
    if (props.onRemove) {
      props.onRemove.call(void 0, {
        target: target.current,
        syntheticEvent: event
      });
    }
  }, [props.onRemove, props.value, props.removable, dispatchData, dispatchFocus, dispatchSelection]);
  var handleKeyDown = React41.useCallback(function(event) {
    switch (event.keyCode) {
      case Keys.left:
        dispatchFocus({ type: FOCUS_ACTION.prev, payload: props.value, event });
        break;
      case Keys.right:
        dispatchFocus({ type: FOCUS_ACTION.next, payload: props.value, event });
        break;
      case Keys.enter:
        dispatchSelection({ type: SELECTION_ACTION.toggle, payload: props.value, event });
        break;
      case Keys.delete:
        handleRemove(event);
        break;
      default:
        break;
    }
    if (props.onKeyDown) {
      props.onKeyDown.call(void 0, {
        target: target.current,
        syntheticEvent: event
      });
    }
  }, [props.onKeyDown, props.value, dispatchFocus, dispatchSelection, handleRemove]);
  var handleFocus = React41.useCallback(function(event) {
    dispatchFocus({ payload: props.value, type: FOCUS_ACTION.current, event });
    if (props.onFocus) {
      props.onFocus.call(void 0, {
        target: target.current,
        syntheticEvent: event
      });
    }
  }, [props.onFocus, props.value, dispatchFocus]);
  var handleBlur = React41.useCallback(function(event) {
    if (props.onBlur) {
      props.onBlur.call(void 0, {
        target: target.current,
        syntheticEvent: event
      });
    }
  }, [props.onBlur]);
  var mouseProps = useMouse(props, target, { onClick: handleClick });
  return React41.createElement(
    "div",
    __assign13({}, mouseProps, { role: props.role, id: props.value, style: props.style, ref: chipRef, dir, tabIndex: getTabIndex(props.tabIndex, props.disabled, void 0), className: classNames("k-chip", (_a = {
      "k-rtl": dir === "rtl",
      "k-disabled": props.disabled,
      "k-selected": selected,
      "k-focus": focused
    }, _a["k-chip-".concat(kendoThemeMaps.sizeMap[props.size] || props.size)] = props.size, _a["k-rounded-".concat(kendoThemeMaps.roundedMap[props.rounded] || props.rounded)] = props.rounded, _a["k-chip-".concat(props.fillMode)] = props.fillMode, _a["k-chip-".concat(props.fillMode, "-").concat(props.themeColor)] = Boolean(props.fillMode && props.themeColor), _a), props.className), "aria-checked": selected, "aria-disabled": props.disabled, "aria-describedby": props.ariaDescribedBy, onFocus: handleFocus, onBlur: handleBlur, onKeyDown: handleKeyDown }),
    selected && (props.selectedIcon || props.selectedSvgIcon) && React41.createElement(IconWrap, { className: "k-chip-icon", name: props.selectedIcon ? toIconName(props.selectedIcon) : void 0, icon: props.selectedSvgIcon, size: "small" }),
    (props.icon || props.svgIcon) && React41.createElement(IconWrap, { className: "k-chip-icon", name: props.icon ? toIconName(props.icon) : void 0, icon: props.svgIcon, size: "small" }),
    props.avatar && React41.createElement(
      "div",
      { className: "k-chip-avatar k-avatar k-rounded-".concat(props.avatar.rounded, " k-avatar-md k-avatar-solid k-avatar-solid-primary"), style: props.avatar.style },
      React41.createElement(
        "span",
        { className: "k-avatar-image" },
        React41.createElement("img", { src: props.avatar.image, alt: props.avatar.imageAlt })
      )
    ),
    React41.createElement("span", { className: "k-chip-content" }, props.children !== void 0 ? props.children : props.text && React41.createElement("span", { "aria-label": props.ariaLabel || props.text, className: "k-chip-label" }, props.text)),
    props.removable && React41.createElement(
      "span",
      { className: "k-chip-actions" },
      React41.createElement(
        "span",
        { className: classNames("k-chip-action", "k-chip-remove-action"), onClick: handleRemove },
        React41.createElement(IconWrap, { name: props.removeIcon ? toIconName(props.removeIcon) : void 0, icon: props.removeSvgIcon || xCircleIcon, size: "small" })
      )
    )
  );
});
var propTypes2 = {
  id: PropTypes16.string,
  text: PropTypes16.string,
  value: PropTypes16.any,
  dir: PropTypes16.oneOf(["ltr", "rtl"]),
  removable: PropTypes16.bool,
  removeIcon: PropTypes16.string,
  removeIconSvg: svgIconPropType,
  disabled: PropTypes16.bool,
  icon: PropTypes16.string,
  svgIcon: svgIconPropType,
  selectedIcon: PropTypes16.string,
  selectedIconSvg: svgIconPropType,
  onRemove: PropTypes16.func,
  dataItem: PropTypes16.any,
  selected: PropTypes16.bool,
  ariaDescribedBy: PropTypes16.string,
  size: PropTypes16.oneOf([null, "small", "medium", "large"]),
  rounded: PropTypes16.oneOf([null, "small", "medium", "large", "full"]),
  fillMode: PropTypes16.oneOf([null, "outline", "solid"]),
  // eslint-disable-next-line max-len
  themeColor: PropTypes16.oneOf([null, "base", "info", "success", "warning", "error"])
};
var defaultProps4 = {
  disabled: false,
  removable: false,
  removeIcon: "k-i-x-circle",
  dir: "ltr",
  size: "medium",
  rounded: "medium",
  fillMode: "solid",
  themeColor: "base"
};
Chip.displayName = "KendoReactChip";
Chip.propTypes = propTypes2;
Chip.defaultProps = defaultProps4;

// node_modules/@progress/kendo-react-buttons/dist/es/FloatingActionButton/FloatingActionButton.js
var React43 = __toESM(require_react());
var PropTypes18 = __toESM(require_prop_types());

// node_modules/@progress/kendo-react-buttons/dist/es/FloatingActionButton/FloatingActionButtonItem.js
var React42 = __toESM(require_react());
var PropTypes17 = __toESM(require_prop_types());
var __assign14 = function() {
  __assign14 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p2 in s)
        if (Object.prototype.hasOwnProperty.call(s, p2))
          t[p2] = s[p2];
    }
    return t;
  };
  return __assign14.apply(this, arguments);
};
var __rest6 = function(s, e) {
  var t = {};
  for (var p2 in s)
    if (Object.prototype.hasOwnProperty.call(s, p2) && e.indexOf(p2) < 0)
      t[p2] = s[p2];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p2 = Object.getOwnPropertySymbols(s); i < p2.length; i++) {
      if (e.indexOf(p2[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p2[i]))
        t[p2[i]] = s[p2[i]];
    }
  return t;
};
var FloatingActionButtonItem = React42.forwardRef(function(props, ref) {
  var className = props.className, disabled = props.disabled, text = props.text, icon = props.icon, style = props.style, id = props.id, focused = props.focused, tabIndex = props.tabIndex, index = props.index, dataItem = props.dataItem, item = props.item, svgIcon = props.svgIcon, onDown = props.onDown, onClick = props.onClick, others = __rest6(props, ["className", "disabled", "text", "icon", "style", "id", "focused", "tabIndex", "index", "dataItem", "item", "svgIcon", "onDown", "onClick"]);
  var elementRef = React42.useRef(null);
  var focusElement = React42.useCallback(function() {
    if (elementRef.current) {
      elementRef.current.focus();
    }
  }, []);
  var getImperativeHandle = React42.useCallback(function() {
    return {
      element: elementRef.current,
      focus: focusElement
    };
  }, [focusElement]);
  React42.useImperativeHandle(ref, getImperativeHandle);
  var handleClick = React42.useCallback(function(event) {
    if (onClick && index !== void 0 && !disabled) {
      onClick(event, index);
    }
  }, [onClick, index]);
  var itemClassNames = React42.useMemo(function() {
    return classNames("k-fab-item", {
      "k-focus": focused,
      "k-disabled": disabled
    }, className);
  }, [className, disabled, focused]);
  var ItemComp = item;
  return React42.createElement("li", __assign14({ ref: elementRef, id, className: itemClassNames, style, role: "menuitem", tabIndex: getTabIndex(tabIndex, disabled), "aria-disabled": disabled, "aria-label": "".concat(text || "", " floatingactionbutton item"), onClick: handleClick, onMouseDown: onDown, onPointerDown: onDown }, others), ItemComp ? React42.createElement(ItemComp, { itemIndex: index, item: dataItem }) : React42.createElement(
    React42.Fragment,
    null,
    text && React42.createElement("span", { className: "k-fab-item-text" }, text),
    icon || svgIcon ? React42.createElement(IconWrap, { className: "k-fab-item-icon", name: icon, icon: svgIcon }) : null
  ));
});
FloatingActionButtonItem.propTypes = {
  className: PropTypes17.string,
  style: PropTypes17.object,
  children: PropTypes17.any,
  disabled: PropTypes17.bool,
  focused: PropTypes17.bool,
  index: PropTypes17.number,
  icon: PropTypes17.string,
  svgIcon: svgIconPropType,
  text: PropTypes17.string,
  tabIndex: PropTypes17.number,
  customProp: PropTypes17.any
};
FloatingActionButtonItem.displayName = "KendoFloatingActionButtonItem";

// node_modules/@progress/kendo-react-buttons/dist/es/FloatingActionButton/utils.js
var DEFAULT_OFFSET2 = "16px";
var toStringValues = function(val) {
  if (typeof val === "number") {
    return val + "px";
  }
  return val;
};
var getAnchorAlign2 = function(fabAlign, rtl) {
  var align2 = { horizontal: rtl ? "right" : "left", vertical: "bottom" };
  if (fabAlign.horizontal === "end") {
    align2.horizontal = rtl ? "left" : "right";
  }
  return align2;
};
var getPopupAlign2 = function(fabAlign, rtl) {
  var align2 = { horizontal: rtl ? "right" : "left", vertical: "top" };
  if (fabAlign.horizontal === "end") {
    align2.horizontal = rtl ? "left" : "right";
  }
  return align2;
};
var getTextDirectionClass = function(rtl, hAlign) {
  var al = hAlign === "end" ? "end" : "start";
  var directions = {
    rtl: { end: "k-text-left", start: "k-text-right" },
    ltr: { start: "k-text-left", end: "k-text-right" }
  };
  return directions[rtl][al];
};
var position3 = function(ref, align2, alignOffset, isRtl) {
  var horizontal = align2.horizontal;
  var vertical = align2.vertical;
  if (ref.current) {
    var xFab = alignOffset && alignOffset.x !== void 0 ? toStringValues(alignOffset.x) : DEFAULT_OFFSET2;
    var xCenterFab = alignOffset && alignOffset.x !== void 0 ? "calc(50% + ".concat(toStringValues(alignOffset.x), ")") : "50%";
    var yFab = alignOffset && alignOffset.y !== void 0 ? toStringValues(alignOffset.y) : DEFAULT_OFFSET2;
    var yCenterFab = alignOffset && alignOffset.y !== void 0 ? "calc(50% + ".concat(toStringValues(alignOffset.y), ")") : "50%";
    ref.current.style.setProperty(horizontalPosition(align2, isRtl), horizontal === "center" ? xCenterFab : xFab);
    ref.current.style.setProperty(verticalPosition(align2), vertical === "middle" ? yCenterFab : yFab);
    if (isRtl) {
      if ((vertical === "top" || vertical === "bottom") && horizontal === "start") {
        ref.current.style.setProperty("left", "unset");
      }
      if (vertical === "middle" && horizontal === "end") {
        ref.current.style.setProperty("right", "unset");
      }
      if (vertical === "middle" && horizontal === "start") {
        ref.current.style.setProperty("left", "unset");
      }
    }
  }
};
var horizontalPosition = function(align2, isRtl) {
  var horizontal = align2.horizontal;
  return {
    end: isRtl ? "left" : "right",
    center: "left",
    start: isRtl ? "right" : "left"
  }[horizontal || "end"];
};
var verticalPosition = function(align2) {
  return {
    top: "top",
    middle: "top",
    bottom: "bottom"
  }[align2.vertical || "bottom"];
};

// node_modules/@progress/kendo-react-buttons/dist/es/FloatingActionButton/FloatingActionButton.js
var __assign15 = function() {
  __assign15 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p2 in s)
        if (Object.prototype.hasOwnProperty.call(s, p2))
          t[p2] = s[p2];
    }
    return t;
  };
  return __assign15.apply(this, arguments);
};
var __rest7 = function(s, e) {
  var t = {};
  for (var p2 in s)
    if (Object.prototype.hasOwnProperty.call(s, p2) && e.indexOf(p2) < 0)
      t[p2] = s[p2];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p2 = Object.getOwnPropertySymbols(s); i < p2.length; i++) {
      if (e.indexOf(p2[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p2[i]))
        t[p2[i]] = s[p2[i]];
    }
  return t;
};
var ZINDEX_FAB_STEP = 2;
var DEFAULT_FAB_ZINDEX = 100;
var FloatingActionButton = React43.forwardRef(function(props, ref) {
  validatePackage2(packageMetadata);
  var _a = props.align, align2 = _a === void 0 ? defaultProps5.align : _a, alignOffset = props.alignOffset, className = props.className, disabled = props.disabled, icon = props.icon, svgIcon = props.svgIcon, iconClass = props.iconClass, id = props.id, items = props.items, item = props.item, text = props.text, _b = props.positionMode, positionMode = _b === void 0 ? defaultProps5.positionMode : _b, _c = props.size, size = _c === void 0 ? defaultProps5.size : _c, style = props.style, _d = props.rounded, rounded = _d === void 0 ? defaultProps5.rounded : _d, _e = props.themeColor, themeColor = _e === void 0 ? defaultProps5.themeColor : _e, overlayStyle = props.overlayStyle, tabIndex = props.tabIndex, accessKey = props.accessKey, _f = props.popupSettings, popupSettings = _f === void 0 ? {} : _f, modal = props.modal, onClick = props.onClick, onItemClick = props.onItemClick, onFocus = props.onFocus, onBlur = props.onBlur, onKeyDown = props.onKeyDown, onOpen = props.onOpen, onClose = props.onClose, others = __rest7(props, ["align", "alignOffset", "className", "disabled", "icon", "svgIcon", "iconClass", "id", "items", "item", "text", "positionMode", "size", "style", "rounded", "themeColor", "overlayStyle", "tabIndex", "accessKey", "popupSettings", "modal", "onClick", "onItemClick", "onFocus", "onBlur", "onKeyDown", "onOpen", "onClose"]);
  var zIndexContext = useZIndexContext();
  var currentZIndex = zIndexContext ? zIndexContext + ZINDEX_FAB_STEP : DEFAULT_FAB_ZINDEX;
  var target = React43.useRef(null);
  var elementRef = React43.useRef(null);
  var listRef = React43.useRef(null);
  var popupRef = React43.useRef(null);
  var focusElement = React43.useCallback(function() {
    if (elementRef.current) {
      elementRef.current.focus();
    }
  }, []);
  var getImperativeHandle = React43.useCallback(function() {
    return {
      element: elementRef.current,
      focus: focusElement
    };
  }, [focusElement]);
  React43.useImperativeHandle(target, getImperativeHandle);
  React43.useImperativeHandle(ref, function() {
    return target.current;
  });
  var _g = React43.useState(false), open = _g[0], setOpen = _g[1];
  var _h = React43.useState(false), focused = _h[0], setFocused = _h[1];
  var _j = React43.useState(-1), focusedIndex = _j[0], setFocusedIndex = _j[1];
  var buttonId = React43.useMemo(function() {
    return guid();
  }, []);
  var dir = useDir(elementRef, props.dir);
  var isRtl = dir === "rtl";
  var listId = React43.useMemo(function() {
    return guid();
  }, []);
  React43.useEffect(function() {
    position3(elementRef, align2, alignOffset, isRtl);
  }, [elementRef, align2, alignOffset, isRtl]);
  React43.useEffect(function() {
    if (focused && elementRef && elementRef.current) {
      elementRef.current.focus();
    }
  }, [focused, elementRef]);
  var dispatchPopupEvent = React43.useCallback(function(dispatchedEvent, isOpen) {
    if (!items) {
      return;
    }
    dispatchEvent(isOpen ? onOpen : onClose, dispatchedEvent, getImperativeHandle(), void 0);
  }, [onOpen, onClose, items]);
  var handleClick = React43.useCallback(function(event) {
    if (!event.target || disabled) {
      return;
    }
    if (!items && onClick) {
      dispatchEvent(onClick, event, getImperativeHandle(), void 0);
    } else {
      setOpen(!open);
      setFocused(true);
      setFocusedIndex(!open ? 0 : -1);
      dispatchPopupEvent(event, !open);
    }
  }, [
    setOpen,
    setFocused,
    setFocusedIndex,
    onClick,
    dispatchPopupEvent,
    open,
    items,
    disabled
  ]);
  var handleFocus = React43.useCallback(function(event) {
    setFocused(true);
    setFocusedIndex(open ? 0 : -1);
    if (onFocus) {
      dispatchEvent(onFocus, event, getImperativeHandle(), void 0);
    }
  }, [onFocus, setFocused, setFocusedIndex]);
  var handleBlur = React43.useCallback(function(event) {
    setFocused(false);
    setOpen(false);
    setFocusedIndex(-1);
    dispatchEvent(onBlur, event, getImperativeHandle(), void 0);
    var fireCloseEvent = open;
    if (fireCloseEvent) {
      dispatchPopupEvent(event, false);
    }
  }, [onBlur, setFocused, setOpen, setFocusedIndex, dispatchPopupEvent]);
  var handleMouseDown = React43.useCallback(function(event) {
    event.preventDefault();
  }, []);
  var dispatchItemClickEvent = React43.useCallback(function(dispatchedEvent, index) {
    if (!items) {
      return;
    }
    if (!items[index].disabled) {
      dispatchEvent(onItemClick, dispatchedEvent, getImperativeHandle(), {
        itemProps: items[index],
        itemIndex: index
      });
    }
  }, [onItemClick]);
  var handleItemClick = React43.useCallback(function(event, clickedItemIndex) {
    if (!event.target || !items) {
      return;
    }
    setFocusedIndex(clickedItemIndex);
    setOpen(false);
    dispatchItemClickEvent(event, clickedItemIndex);
    dispatchPopupEvent(event, false);
  }, [setFocusedIndex, setOpen, dispatchItemClickEvent, dispatchPopupEvent]);
  var handleItemDown = React43.useCallback(function(event) {
    var activeElement = getActiveElement(document);
    if (activeElement === elementRef.current) {
      event.preventDefault();
    }
  }, [elementRef]);
  var handleKeyDown = React43.useCallback(function(event) {
    var currIndex = focusedIndex;
    var maxNavIndex = items ? items.length - 1 : -1;
    var isAtBottom = align2.vertical === "bottom";
    switch (event.keyCode) {
      case Keys.enter:
      case Keys.space:
        if (currIndex >= 0) {
          dispatchItemClickEvent(event, currIndex);
        }
        event.preventDefault();
        setOpen(!open);
        setFocusedIndex(!open ? 0 : -1);
        break;
      case Keys.esc:
        event.preventDefault();
        setOpen(false);
        setFocusedIndex(-1);
        break;
      case Keys.home:
        event.preventDefault();
        setFocusedIndex(0);
        break;
      case Keys.end:
        event.preventDefault();
        setFocusedIndex(maxNavIndex);
        break;
      case Keys.down:
      case Keys.right:
        event.preventDefault();
        if (currIndex < maxNavIndex && !isAtBottom) {
          setFocusedIndex(currIndex + 1);
        }
        if (currIndex > 0 && isAtBottom) {
          setFocusedIndex(currIndex - 1);
        }
        break;
      case Keys.up:
      case Keys.left:
        event.preventDefault();
        if (currIndex > 0 && !isAtBottom) {
          setFocusedIndex(currIndex - 1);
        }
        if (currIndex < maxNavIndex && isAtBottom) {
          setFocusedIndex(currIndex + 1);
        }
        break;
      default:
        break;
    }
    dispatchEvent(onKeyDown, event, getImperativeHandle(), void 0);
  }, [onKeyDown, focusedIndex, setFocusedIndex, isRtl, setOpen]);
  var buttonClassNames = React43.useMemo(function() {
    var _a2;
    return classNames("k-fab k-fab-solid", (_a2 = {
      "k-fab-sm": size === "small",
      "k-fab-md": size === "medium",
      "k-fab-lg": size === "large",
      "k-disabled": disabled,
      "k-pos-absolute": positionMode === "absolute",
      "k-pos-fixed": positionMode === "fixed",
      "k-focus": focused
    }, _a2["k-rounded-".concat(kendoThemeMaps.roundedMap[rounded] || rounded)] = rounded, _a2["k-fab-solid-".concat(themeColor)] = themeColor, _a2), "k-".concat(align2.vertical, "-").concat(align2.horizontal), className);
  }, [themeColor, size, rounded, disabled, positionMode, align2, focused, className]);
  var fabItems = items && items.map(function(element3, index) {
    return React43.createElement(FloatingActionButtonItem, __assign15({}, element3, { key: index, index, id: "".concat(listId, "-").concat(index), disabled: disabled || element3.disabled, focused: focusedIndex === index, dataItem: element3, item, className: classNames(element3.className, getTextDirectionClass(dir || "ltr", align2.horizontal)), onClick: handleItemClick, onDown: handleItemDown }));
  });
  var isIconFab = Boolean((icon || svgIcon) && !text);
  var fabWidth = elementRef.current ? elementRef.current.offsetWidth : 0;
  var iconWidth = 32;
  var spacing = fabWidth / 2 - iconWidth / 2;
  return React43.createElement(
    ZIndexContext.Provider,
    { value: currentZIndex },
    React43.createElement(
      React43.Fragment,
      null,
      React43.createElement(
        "button",
        __assign15({ ref: elementRef, id: id || buttonId, role: items ? "menubutton" : "button", type: "button", "aria-disabled": disabled, "aria-expanded": items ? open : void 0, "aria-haspopup": items ? true : false, "aria-label": "".concat(text || "", " floatingactionbutton"), "aria-owns": items ? listId : void 0, "aria-activedescendant": focusedIndex >= 0 && items ? "".concat(listId, "-").concat(focusedIndex) : void 0, tabIndex: getTabIndex(tabIndex, disabled), accessKey, dir, disabled, className: buttonClassNames, style, onClick: handleClick, onMouseDown: handleMouseDown, onFocus: handleFocus, onBlur: handleBlur, onKeyDown: handleKeyDown }, others),
        icon || svgIcon ? React43.createElement(IconWrap, { className: "k-fab-icon", name: icon, icon: svgIcon }) : iconClass ? React43.createElement("span", { role: "presentation", className: iconClass }) : null,
        text && React43.createElement("span", { className: "k-fab-text" }, text)
      ),
      modal && open && React43.createElement("div", { className: "k-overlay", style: __assign15({ zIndex: currentZIndex }, overlayStyle) }),
      React43.createElement(
        Popup,
        { ref: popupRef, anchor: elementRef.current, show: open, animate: popupSettings.animate, popupClass: classNames("k-popup-transparent k-fab-popup", popupSettings.popupClass), anchorAlign: popupSettings.anchorAlign || getAnchorAlign2(align2, isRtl), popupAlign: popupSettings.popupAlign || getPopupAlign2(align2, isRtl), style: { boxShadow: "none" } },
        React43.createElement("ul", { ref: listRef, role: "menu", "aria-labelledby": id, id: listId, className: classNames("k-fab-items", {
          "k-fab-items-bottom": align2.vertical !== "bottom",
          "k-fab-items-top": align2.vertical === "bottom"
        }), style: {
          paddingLeft: isIconFab ? spacing : void 0,
          paddingRight: isIconFab ? spacing : void 0
        } }, fabItems)
      )
    )
  );
});
FloatingActionButton.propTypes = {
  className: PropTypes18.string,
  style: PropTypes18.object,
  id: PropTypes18.string,
  dir: PropTypes18.string,
  tabIndex: PropTypes18.number,
  accessKey: PropTypes18.string,
  disabled: PropTypes18.bool,
  icon: PropTypes18.string,
  svgIcon: svgIconPropType,
  iconClass: PropTypes18.string,
  text: PropTypes18.string,
  alignOffset: PropTypes18.shape({
    x: PropTypes18.oneOfType([PropTypes18.number, PropTypes18.string]),
    y: PropTypes18.oneOfType([PropTypes18.number, PropTypes18.string])
  }),
  align: PropTypes18.shape({
    vertical: PropTypes18.oneOf(["top", "middle", "bottom"]),
    horizontal: PropTypes18.oneOf(["start", "center", "end"])
  }),
  positionMode: PropTypes18.oneOf(["absolute", "fixed"]),
  size: PropTypes18.oneOf([null, "small", "medium", "large"]),
  rounded: PropTypes18.oneOf([null, "small", "medium", "large", "full"]),
  themeColor: PropTypes18.oneOf([
    null,
    "primary",
    "secondary",
    "tertiary",
    "info",
    "success",
    "warning",
    "error",
    "dark",
    "light",
    "inverse"
  ]),
  modal: PropTypes18.bool,
  overlayStyle: PropTypes18.object
};
var defaultProps5 = {
  align: { vertical: "bottom", horizontal: "end" },
  size: "medium",
  rounded: "full",
  themeColor: "primary",
  positionMode: "fixed"
};
FloatingActionButton.displayName = "KendoFloatingActionButton";
export {
  Button,
  ButtonGroup,
  Chip,
  ChipList,
  DropDownButton,
  DropDownButtonItem,
  FloatingActionButton,
  FloatingActionButtonItem,
  SplitButton,
  SplitButtonItem,
  Toolbar,
  ToolbarItem,
  ToolbarSeparator,
  ToolbarSpacer,
  toolbarButtons
};
//# sourceMappingURL=@progress_kendo-react-buttons.js.map
